<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Peter Gerritsen’s blog</title>
        <description>Peter Gerritsen’s blog - Peter Gerritsen</description>
        <link>http://username.github.io</link>
        <link>http://username.github.io</link>
        <lastBuildDate>2013-12-08T13:12:13+01:00</lastBuildDate>
        <pubDate>2013-12-08T13:12:13+01:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Install Help Collection files for a different language in SharePoint 2010</title>
                <description>&lt;p&gt;After installing a languagepack help contents should be available when you create a site collection in that language. Sometimes however SharePoint gives you a message that the files have not been installed when you click the help button or go to the Help-settings page for your sitecollection.&lt;/p&gt;

&lt;p&gt;You can force SharePoint to install the files using the hcinstal.exe tool in the bin folder under the SharePoint root (c:\program files\common files\microsoft shared\web server extensions\14\bin):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
hcinstal.exe /act InstallAllHCs /loc 1043
&lt;/code&gt; This command will install all available help content for LCID 1043 (Dutch)&lt;/p&gt;

&lt;p&gt;After this running this command (which can take up to 10-15 minutes easily) you need to run the SharePoint Products and Configuration Wizard on each front-end server.&lt;/p&gt;

&lt;p&gt;I think you can also use the following 2 PowerShell commands, but I wasn&amp;#8217;t able to test these after the first solution worked:&lt;/p&gt;

&lt;p&gt;* Install-SPHelpCollection * Install-SPApplicationContent&lt;/p&gt;</description>
                <link>http://username.github.io/2010/10/26/install-help-collection-files-for-a-different-language-in-sharepoint-2010</link>
                <guid>http://username.github.io/2010/10/26/install-help-collection-files-for-a-different-language-in-sharepoint-2010</guid>
                <pubDate>2010-10-26T13:07:18Z</pubDate>
        </item>

        <item>
                <title>People Search: Use a custom Ranking Model to search in added Profile Properties</title>
                <description>&lt;p&gt;When you use the out-of-the box components for searching for people, a generic search with a keyword that is included in an added Profile property will not give the results you might expect.&lt;/p&gt;

&lt;p&gt;This is especially a problem with the out-of-the-box webpart that shows information about a person:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/2010/10/Profile-properties-webpart.png&#39;&gt;&lt;img alt=&#39;&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/2010/10/Profile-properties-webpart-300x103.png&#39; /&gt;&lt;/a&gt; When you click on one of the values in this webpart, you will be redirected to the people search results page with the value you clicked passed in as the search keyword:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/2010/10/Profile-search-generic.png&#39;&gt;&lt;img alt=&#39;&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/2010/10/Profile-search-generic-300x105.png&#39; /&gt;&lt;/a&gt; But this will not give you any results. &lt;a href=&#39;http://kgraeme.wordpress.com/2010/07/28/sharepoint-user-profile-custom-properties-keyword-search-problem/&#39;&gt;This post&lt;/a&gt; by kgreame outlines the same problems and some of the steps he tried to solve this issue. In the comments to that post, a workaround is mentioned: map the matching crawled properties to the ContentsHidden Managed Property. There is however an other way. In &lt;a href=&#39;http://sharepoint.microsoft.com/blogs/LKuhn/Lists/Posts/Post.aspx?List=29310d0a-1eda-4834-bb4c-06ee575a40c3&amp;amp;ID=52&#39;&gt;this post&lt;/a&gt; by Larry Kuhn, he explains how the DEFAULTPROPERTIES within the SharePoint Search work. By setting a weight of a Managed Property, you will include it in the ranking model SharePoint uses and the property is therefore added to the default properties that are searched. SharePoint 2010 introduces the concept of Ranking Models, so the solution mentioned in that blogpost doesn&amp;#8217;t work. We can however create our own Ranking Model. I&amp;#8217;ve copied the information from the Ranking Model that SharePoint uses for People Search and added my own Managed Property, Expertise, with a weight of 1.0: &lt;code&gt;xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;rankingModel name=&amp;quot;CustomPeopleRanking&amp;quot; id=&amp;quot;5EA2750C-8165-4f65-BD12-6E6DAAD45FE0&amp;quot; description=&amp;quot;Custom People Ranking&amp;quot; xmlns=&amp;quot;http://schemas.microsoft.com/office/2009/rankingModel&amp;quot;&amp;gt;
  &amp;lt;queryDependentFeatures&amp;gt;
    &amp;lt;queryDependentFeature pid=&amp;quot;177&amp;quot; name=&amp;quot;RankingWeightName&amp;quot; weight=&amp;quot;0.5&amp;quot; lengthNormalization=&amp;quot;0&amp;quot; /&amp;gt;
    &amp;lt;queryDependentFeature pid=&amp;quot;19&amp;quot; name=&amp;quot;PreferredName&amp;quot; weight=&amp;quot;1.0&amp;quot; lengthNormalization=&amp;quot;0&amp;quot; /&amp;gt;
    &amp;lt;queryDependentFeature pid=&amp;quot;24&amp;quot; name=&amp;quot;JobTitle&amp;quot; weight=&amp;quot;2.0&amp;quot; lengthNormalization=&amp;quot;0&amp;quot; /&amp;gt;
    &amp;lt;queryDependentFeature pid=&amp;quot;39&amp;quot; name=&amp;quot;Responsibilities&amp;quot; weight=&amp;quot;1.0&amp;quot; lengthNormalization=&amp;quot;5&amp;quot; /&amp;gt;
    &amp;lt;queryDependentFeature pid=&amp;quot;179&amp;quot; name=&amp;quot;RankingWeightLow&amp;quot; weight=&amp;quot;0.2&amp;quot; lengthNormalization=&amp;quot;5&amp;quot; /&amp;gt;
    &amp;lt;queryDependentFeature pid=&amp;quot;175&amp;quot; name=&amp;quot;ContentsHidden&amp;quot; weight=&amp;quot;0.1&amp;quot; lengthNormalization=&amp;quot;5&amp;quot; /&amp;gt;
    &amp;lt;queryDependentFeature pid=&amp;quot;35&amp;quot; name=&amp;quot;Memberships&amp;quot; weight=&amp;quot;0.25&amp;quot; lengthNormalization=&amp;quot;5&amp;quot; /&amp;gt;
    &amp;lt;queryDependentFeature pid=&amp;quot;178&amp;quot; name=&amp;quot;RankingWeightHigh&amp;quot; weight=&amp;quot;2.0&amp;quot; lengthNormalization=&amp;quot;0&amp;quot; /&amp;gt;
    &amp;lt;queryDependentFeature pid=&amp;quot;180&amp;quot; name=&amp;quot;Pronunciations&amp;quot; weight=&amp;quot;0.05&amp;quot; lengthNormalization=&amp;quot;0&amp;quot; /&amp;gt;
    &amp;lt;queryDependentFeature pid=&amp;quot;408&amp;quot; name=&amp;quot;Expertise&amp;quot; weight=&amp;quot;1.0&amp;quot; lengthNormalization=&amp;quot;0&amp;quot; /&amp;gt;
  &amp;lt;/queryDependentFeatures&amp;gt;
&amp;lt;/rankingModel&amp;gt;
&lt;/code&gt; We can then add this Ranking Model to SharePoint with Powershell: &lt;code&gt;
Get-SPEnterpriseSearchServiceApplication | New-SPEnterpriseSearchRankingModel
&lt;/code&gt; And paste in the XML of this Ranking Model when Powershell prompts you for it.&lt;/p&gt;

&lt;p&gt;But how do we force SharePoint to use this Ranking Model? I&amp;#8217;ve outlined one of the solutions in a &lt;a href=&#39;http://blog.petergerritsen.nl/2010/10/11/let-the-sharepoint-search-web-parts-use-an-other-ranking-model/&#39;&gt;previous post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So after adding a web part that sets the ranking model we can perform the search again:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/2010/10/Profile-search-after-ranking-model.png&#39;&gt;&lt;img alt=&#39;&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/2010/10/Profile-search-after-ranking-model-300x139.png&#39; /&gt;&lt;/a&gt; And bingo, the user with this value in an extra profile property shows up in the search results.&lt;/p&gt;

&lt;p&gt;Why use this over mapping the properties in the &amp;#8216;ContentsHidden&amp;#8217; Managed Property? As you can see the &amp;#8216;ContentsHidden&amp;#8217; property is included in the Ranking Model with a value of 0.1. If you want to give more weight to a custom property or you have more properties to which you want to assign a different weight, you will need to modify the Ranking Model.&lt;/p&gt;</description>
                <link>http://username.github.io/2010/10/12/people-search-use-a-custom-ranking-model-to-search-in-added-profile-properties</link>
                <guid>http://username.github.io/2010/10/12/people-search-use-a-custom-ranking-model-to-search-in-added-profile-properties</guid>
                <pubDate>2010-10-12T13:37:04Z</pubDate>
        </item>

        <item>
                <title>Let the SharePoint Search web parts use an other Ranking Model</title>
                <description>&lt;p&gt;SharePoint 2010 introduces the concept of Ranking Models. These models allow you to control the ranking of search results.&lt;/p&gt;

&lt;p&gt;But how do you tell the search web parts to use your custom ranking model, once you specified it? As far as I can tell there’s 2 options:&lt;/p&gt;

&lt;p&gt;* Pass in the id of the model through the querystring by appending &lt;code&gt;&amp;amp;rm=&amp;lt;guid of ranking model&amp;gt;&lt;/code&gt; * Use the Shared Query Manager&lt;/p&gt;

&lt;p&gt;The Shared Query Manager is &lt;em&gt;the&lt;/em&gt; option for modifying the query the search web parts are going to use.&lt;/p&gt;

&lt;p&gt;To use the Query Manager to set an other Ranking Model I’ve created a custom web part. To retrieve the Query Manager all you have to do is call the static GetInstance method of the SharedQueryManager class.&lt;/p&gt;

&lt;p&gt;After that, you can loop through the query manager and each location within the LocationList to set the ID of the Ranking Model:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
public class SetRankingModel : WebPart
    {
        protected override void OnInit(EventArgs e)
        {
            try
            {
                QueryManager qm = SharedQueryManager.GetInstance(this.Page).QueryManager;
                foreach (LocationList ll in qm)
                {
                    foreach (Location l in ll)
                    {
                        try
                        {
                            l.RankingModelID = &amp;quot;5ea2750c-8165-4f65-bd12-6e6daad45fe1&amp;quot;;
                        }
                        catch { }
                    }
                }
                base.OnInit(e);
            }
            catch { }
        }
    }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After you’ve placed this web part on a search results page, each web part will use your custom Ranking Model.&lt;/p&gt;</description>
                <link>http://username.github.io/2010/10/11/let-the-sharepoint-search-web-parts-use-an-other-ranking-model</link>
                <guid>http://username.github.io/2010/10/11/let-the-sharepoint-search-web-parts-use-an-other-ranking-model</guid>
                <pubDate>2010-10-11T18:48:47Z</pubDate>
        </item>

        <item>
                <title>Strange FullTextSqlQuery query behaviour (System.ServiceModel.FaultException)</title>
                <description>&lt;p&gt;Today I was trying to fix an error in a custom webpart that performs a query on the SharePoint farm. The goal was to retreive the records within a site though the search system.&lt;/p&gt;

&lt;p&gt;First I added a metadata property ItemDeclaredRecord that is mapped to ows__vti_ItemDeclaredRecord (DateTime). Then I tried the following query (using &lt;a href=&#39;http://blogs.technet.com/b/speschka/archive/2010/08/15/free-developer-search-tool-for-sharepoint-2010-search-and-fast-search-for-sharepoint.aspx&#39;&gt;Steve Peschka&amp;#8217;s Developer Search Tool&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
SELECT Size, Rank, Path, Title, Description, Write FROM scope() WHERE  (ItemDeclaredRecord &amp;gt; &amp;#39;1900/01/01 00:00:00&amp;#39;)  AND CONTAINS (Path, &amp;#39;&amp;quot;/projecten&amp;quot;&amp;#39;)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This query works fine and retreives all records declared after January 1st, 1900 under the &amp;#8220;projecten&amp;#8221; site. To retreive all records within a specific subsite I then tried the following query:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
SELECT Size, Rank, Path, Title, Description, Write FROM scope() WHERE  (ItemDeclaredRecord &amp;gt; &amp;#39;1900/01/01 00:00:00&amp;#39;)  AND CONTAINS (Path, &amp;#39;&amp;quot;/projecten/subsite1&amp;quot;&amp;#39;)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This threw a FaultException?! After fiddling around with the query for a few hours, I finally found a query that works:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
SELECT Size, Rank, Path, Title, Description, Write FROM scope() WHERE  (ItemDeclaredRecord &amp;gt; &amp;#39;1900/01/01 00:00:00&amp;#39;)  AND CONTAINS (Path, &amp;#39;&amp;quot;/projecten/subsite1&amp;quot;&amp;#39;) ORDER BY Rank DESC
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m not sure what the ORDER BY part does to the search system internally, but for now I&amp;#8217;m guessing it&amp;#8217;s SQL for &amp;#8216;Pretty pretty please!&amp;#8217;.&lt;/p&gt;

&lt;p&gt;EDIT: The property you add in the ORDER BY part has to have the &amp;#8220;Reduce storage requirements for text properties by using a hash for comparison” option checked.&lt;/p&gt;</description>
                <link>http://username.github.io/2010/09/20/strange-fulltextsqlquery-query-behaviour-system-servicemodel-faultexception</link>
                <guid>http://username.github.io/2010/09/20/strange-fulltextsqlquery-query-behaviour-system-servicemodel-faultexception</guid>
                <pubDate>2010-09-20T11:55:56Z</pubDate>
        </item>

        <item>
                <title>Ribbon buttons and the Client Object Model</title>
                <description>&lt;p&gt;One of the standard Ribbon buttons in SharePoint 2010 allows you to mail a link to a document. Unfortunately the dev team at Microsoft didn’t update the functionality of this button to use one of the enhanced UI features: multiple selection. When you select 2 or more items, the button is automatically disabled.&lt;/p&gt;

&lt;p&gt;To bypass this inconvenience, we decided to implement our own version of the button to replace the standard button. Replacing a button is actually quite easy with the UI extensibility options in SP2010.&lt;/p&gt;

&lt;p&gt;First of, I started with an empty SharePoint project in Visual Studio 2010. I chose to create a sandboxed solution. Because we need to deploy and inject a JavaScript file on every page, I decided to go for the solution Jan Tielens introduced in his blog post ‘&lt;a href=&#39;http://weblogs.asp.net/jan/archive/2010/09/02/deploying-and-using-jquery-with-a-sharepoint-2010-sandboxed-solution.aspx&#39;&gt;Deploying and using jQuery with a SharePoint 2010 Sandboxed Solution&lt;/a&gt;’.&lt;/p&gt;

&lt;p&gt;First of I added an empty element item to the project called Buttons. In this element I included the XML to hide the existing button and inject my own button:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xml
&amp;lt;CustomAction
Id=&amp;quot;TTSendLinksEmailRemoveRibbonButton&amp;quot;
Location=&amp;quot;CommandUI.Ribbon&amp;quot;&amp;gt;
&amp;lt;CommandUIExtension&amp;gt;
&amp;lt;CommandUIDefinitions&amp;gt;
&amp;lt;CommandUIDefinition
Location=&amp;quot;Ribbon.Documents.Share.EmailItemLink&amp;quot; /&amp;gt;
&amp;lt;/CommandUIDefinitions&amp;gt;
&amp;lt;/CommandUIExtension&amp;gt;
&amp;lt;/CustomAction&amp;gt;
&amp;lt;CustomAction
Id=&amp;quot;TTSendLinksEmailButton&amp;quot;
Location=&amp;quot;CommandUI.Ribbon&amp;quot;
Sequence=&amp;quot;15&amp;quot;
Title=&amp;quot;E-mail a link&amp;quot;&amp;gt;
&amp;lt;CommandUIExtension&amp;gt;
&amp;lt;CommandUIDefinitions&amp;gt;
&amp;lt;CommandUIDefinition Location=&amp;quot;Ribbon.Documents.Share.Controls._children&amp;quot;&amp;gt;
&amp;lt;Button
Id=&amp;quot;Ribbon.Documents.Share.TTSendLinksEmailButton&amp;quot;
Alt=&amp;quot;$Resources:core,cui_ButEmailLink;&amp;quot;
LabelText=&amp;quot;$Resources:core,cui_ButEmailLink;&amp;quot;
ToolTipTitle=&amp;quot;$Resources:core,cui_ButEmailLink;&amp;quot;
ToolTipDescription=&amp;quot;$Resources:core,cui_STT_ButEmailLinkDocument;&amp;quot;
Sequence=&amp;quot;15&amp;quot;
Command=&amp;quot;TT_SendLinksEmail_Button&amp;quot;
Image16by16=&amp;quot;/_layouts/$Resources:core,Language;/images/formatmap16x16.png&amp;quot;
Image16by16Top=&amp;quot;-16&amp;quot;
Image16by16Left=&amp;quot;-88&amp;quot;
Image32by32=&amp;quot;/_layouts/$Resources:core,Language;/images/formatmap32x32.png&amp;quot;
Image32by32Top=&amp;quot;-128&amp;quot;
Image32by32Left=&amp;quot;-448&amp;quot;
TemplateAlias=&amp;quot;o1&amp;quot; /&amp;gt;
&amp;lt;/CommandUIDefinition&amp;gt;
&amp;lt;/CommandUIDefinitions&amp;gt;
&amp;lt;CommandUIHandlers&amp;gt;
&amp;lt;CommandUIHandler
Command=&amp;quot;TT_SendLinksEmail_Button&amp;quot;
CommandAction=&amp;quot;javascript:function sendLinksMail() {
TamTam_SP2010_SendLinksMail_SendLinksMail();
}
sendLinksMail();&amp;quot;
EnabledScript=&amp;quot;javascript:function oneOrMoreEnable() {
var items = SP.ListOperation.Selection.getSelectedItems();
var ci = CountDictionary(items);
return (ci &amp;gt; 0);
}
oneOrMoreEnable();&amp;quot; /&amp;gt;
&amp;lt;/CommandUIHandlers&amp;gt;
&amp;lt;/CommandUIExtension&amp;gt;
&amp;lt;/CustomAction&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;For my own button, I copied the resourcestrings from the original XML that is in CMDUI.xml (14\TEMPLATE\GLOBAL\XML). This way the button gets the same look and feel and localized labels as the original button. When pressing the button the JavaScript function TamTam_SP2010_SendLinksMail_SendLinksMail is called. The EnabledScript enables the button when 1 or more items are selected.&lt;/p&gt;

&lt;p&gt;To make sure the JavaScript is included, we’ll use a CustomAction element with ScriptLink as location (for more information see the previously mentioned blogpost by Jan Tielens):&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xml
&amp;lt;CustomAction
ScriptSrc=&amp;quot;~SiteCollection/SiteAssets/TamTam.SP2010.EmailALinkMultiple.js&amp;quot;
Location=&amp;quot;ScriptLink&amp;quot;
Sequence=&amp;quot;10&amp;quot;&amp;gt;
&amp;lt;/CustomAction&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now all we have to do is create the necessary JavaScript. The out-of-the-box functionality opens the users email client with the link to the selected document in the body of the message.&lt;/p&gt;

&lt;p&gt;To create the body of the message we’ll need to retrieve the link for every selected item by use of the Client Object Model. First we’ll get the ClientContext, the SPSite, the list were in and the id’s of the selected items:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
TamTam_SP2010_SendLinksMail_SendLinksMail = function () {
this.selectedItems = SP.ListOperation.Selection.getSelectedItems();
this.selectedListGuid = SP.ListOperation.Selection.getSelectedList();
this.context = SP.ClientContext.get_current();
this.site = this.context.get_site();
this.context.load(this.site);
this.web = this.context.get_web()
this.selectedList = this.web.get_lists().getById(this.selectedListGuid);
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We then need to get the listitem object for every selected item. Because this is an asynchronous operation we’ll create an array, include every selected listitem in there and tell the context to load each item before calling executeQueryAsync:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
this.selectedFiles = new Array();
var k;
for (k in this.selectedItems) {
this.selectedFiles.push(this.selectedList.getItemById(this.selectedItems[k].id).get_file());
this.context.load(this.selectedFiles[k]);
}
this.context.executeQueryAsync(Function.createDelegate(this, TamTam_SP2010_SendLinksMail_onQuerySucceeded), Function.createDelegate(this, TamTam_SP2010_SendLinksMail_onQueryFailed));
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then in the onQuerySucceeded callback function we can get the url’s for the items and construct the email:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
TamTam_SP2010_SendLinksMail_onQuerySucceeded = function () {
var siteUrl = this.site.get_url();
var k;
var bodystring = &amp;quot;&amp;quot;;
for (k in this.selectedFiles) {
var fileUrl = this.selectedFiles[k].get_serverRelativeUrl();
bodystring += siteUrl + fileUrl + &amp;quot;%0d%0a%0d%0a&amp;quot;;
}
window.open(&amp;#39;mailto:?body=&amp;#39; + bodystring);
}
&lt;/code&gt;&lt;/p&gt;</description>
                <link>http://username.github.io/2010/09/06/ribbon-buttons-and-the-client-object-model</link>
                <guid>http://username.github.io/2010/09/06/ribbon-buttons-and-the-client-object-model</guid>
                <pubDate>2010-09-06T11:03:17Z</pubDate>
        </item>

        <item>
                <title>CSS contents showing in settings page for site based on custom template</title>
                <description>&lt;p&gt;At a customer we created a few custom site templates by configuring them and then saving them as template. When creating new sites based on this template, we had the strange issue that the contents of the Alternate CSS (AlternateCSSUrl) were included and showing in the header on layouts pages in the sites. It appears that the AlternateCSSUrl is also set on the AlternateHeader property of the SPWeb object.&lt;/p&gt;

&lt;p&gt;This &lt;a href=&#39;http://social.technet.microsoft.com/Forums/en/sharepoint2010customization/thread/599d42d4-72c0-4688-af52-91fb7528fe60&#39;&gt;post&lt;/a&gt; on the SharePoint 2010 forums also mentions this issue.&lt;/p&gt;

&lt;p&gt;You can off course use powershell to get rid of this problem:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
$site = Get-SPSite &amp;quot;http://sitecollectionurl&amp;quot;
$web = $site.OpenWeb(&amp;quot;/weburl&amp;quot;)
$web.AlternateHeader = &amp;quot;&amp;quot;
$web.Update()
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Update: The post on the forums got answered and according to that it has to do with the publishing feature that was activated before saving the site as a template. However in my case that feature wasn&amp;#8217;t activated, because we&amp;#8217;re aware that such a scenario isn&amp;#8217;t officially supported by Microsoft.&lt;/p&gt;</description>
                <link>http://username.github.io/2010/07/12/css-contents-showing-in-settings-page-for-site-based-on-custom-template</link>
                <guid>http://username.github.io/2010/07/12/css-contents-showing-in-settings-page-for-site-based-on-custom-template</guid>
                <pubDate>2010-07-12T08:47:15Z</pubDate>
        </item>

        <item>
                <title>SharePoint 2010 Search: Property Restriction in Keyword Queries</title>
                <description>&lt;p&gt;The new version of SharePoint offers more capabilities in the keyword syntax to enhance the search experience. While in the previous version you had to resort to FullText SQL queries, a lot of things can now be accomplished with keyword syntax.&lt;/p&gt;

&lt;p&gt;For instance if you would like to filter on a date, you could use the following query: &lt;code&gt;
LastModifiedTime&amp;gt;=01/06/2010
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The actual format of the date depends on your regional settings (I&amp;#8217;m using Dutch (nl-NL) in this case).&lt;/p&gt;

&lt;p&gt;To search within a range of dates you can use the following query syntax: &lt;code&gt;
LastModifiedTime:28/06/2010..30/06/2010
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To exclude items you could use the following syntax: &lt;code&gt;
LastModifiedTime&amp;lt;&amp;gt;28/06/2010
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;More info from MSDN about keyword syntax kan be found here: &lt;a href=&#39;http://msdn.microsoft.com/en-us/library/ee558911.aspx&#39;&gt;http://msdn.microsoft.com/en-us/library/ee558911.aspx&lt;/a&gt;&lt;/p&gt;</description>
                <link>http://username.github.io/2010/07/01/sharepoint-2010-search-property-restriction-keyword-queries</link>
                <guid>http://username.github.io/2010/07/01/sharepoint-2010-search-property-restriction-keyword-queries</guid>
                <pubDate>2010-07-01T12:01:57Z</pubDate>
        </item>

        <item>
                <title>Set default value on a Managed Metadata field through code</title>
                <description>&lt;p&gt;In some situations, such as metadata inheritance from web properties, you&amp;#8217;ll want to set the default value of a field from code. Because the DefaultValue property of a SPField is a string, you will need to know the correct format to set the value of a Managed Metadata column. The easiest way to retreive this value is to create an item with the correct value and read it with the following code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
SPList list = SPContext.Current.List;
SPField field = list.Fields[&amp;quot;Thema&amp;quot;];
string value = field.GetValidatedString(SPContext.Current.ListItem[field.Id]);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;When you use the resulting value as the default value on the field, everything should be okay. When you set an invalid default value, you will not be able to create new items anymore or set the default value through the UI. You can get around this by setting the default value back to an empty string.&lt;/p&gt;</description>
                <link>http://username.github.io/2010/06/26/set-default-value-on-a-managed-metadata-field-through-code</link>
                <guid>http://username.github.io/2010/06/26/set-default-value-on-a-managed-metadata-field-through-code</guid>
                <pubDate>2010-06-26T13:08:23Z</pubDate>
        </item>

        <item>
                <title>Term Store management option missing in Site Collection settings</title>
                <description>&lt;p&gt;When you don&amp;#8217;t see the Term Store Management option in your site collection settings:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/2010/06/Term-Store-Management-option.png&#39;&gt;&lt;img alt=&#39;&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/2010/06/Term-Store-Management-option-300x224.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A hidden web application feature is probably not activated. You can activate it through PowerShell or stsadm:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
Enable-SPFeature -id &amp;quot;73EF14B1-13A9-416b-A9B5-ECECA2B0604C&amp;quot; -Url &amp;lt;Site-URL&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
stsadm -o activatefeature -id 73EF14B1-13A9-416b-A9B5-ECECA2B0604C -url http://&amp;lt;url&amp;gt; -force
&lt;/code&gt;&lt;/p&gt;</description>
                <link>http://username.github.io/2010/06/09/term-store-management-option-missing-in-site-collection-settings</link>
                <guid>http://username.github.io/2010/06/09/term-store-management-option-missing-in-site-collection-settings</guid>
                <pubDate>2010-06-09T12:30:10Z</pubDate>
        </item>

        <item>
                <title>Issues with SharePoint Designer 64 bit</title>
                <description>&lt;p&gt;When you&amp;#8217;ve got Office 2010 64-bit installed you can only install the 64-bit version of SharePoint Designer.&lt;/p&gt;

&lt;p&gt;Sadly this version has some integration issues. Main ones I&amp;#8217;ve noticed is not being able to use the &amp;#8220;Edit in SharePoint designer&amp;#8221; link in the context menu and not being able to edit page layouts in SharePoint Designer.&lt;/p&gt;

&lt;p&gt;64-bit Office also has some integration issues. So unless you need 64 bit for working with really large Excel Sheets, I would stick with 32-bit for now.&lt;/p&gt;</description>
                <link>http://username.github.io/2010/06/04/issues-with-sharepoint-designer-64-bit</link>
                <guid>http://username.github.io/2010/06/04/issues-with-sharepoint-designer-64-bit</guid>
                <pubDate>2010-06-04T13:38:11Z</pubDate>
        </item>

        <item>
                <title>New languages available for Soccerino</title>
                <description>&lt;p&gt;-Dutch -German -Portugues -Serbian -Polish&lt;/p&gt;

&lt;p&gt;If you would like to translate it into your own language, you&amp;#8217;re very welcome to. You can download the language source file from: http://www.babelzilla.org/forum/index.php?showtopic=6237&lt;/p&gt;</description>
                <link>http://username.github.io/2010/06/04/new-languages-available-for-soccerino</link>
                <guid>http://username.github.io/2010/06/04/new-languages-available-for-soccerino</guid>
                <pubDate>2010-06-04T06:43:19Z</pubDate>
        </item>

        <item>
                <title>Tam Tam Lauches Soccerino - World Cup 2010 Pool for SharePoint AND Facebook</title>
                <description>&lt;p&gt;At previous footbal tournaments we had a lot of success with our SharePoint football pool webparts.&lt;/p&gt;

&lt;p&gt;This year we launch Soccerino, available on SharePoint (2007 / 2010) AND Facebook. More information on &lt;a href=&#39;http://soccerino.com&#39;&gt;soccerino.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;UPDATE: We have a resource file available if you want to the application in you own language. Just download the zip-file below with the javascript file with translations, update the text and send the file to us (peterge &lt;em&gt;at&lt;/em&gt; tamtam &lt;em&gt;dot&lt;/em&gt; nl). At the moment we have the following languages already covered:&lt;/p&gt;

&lt;p&gt;* English (duh)&lt;/p&gt;

&lt;p&gt;* Dutch&lt;/p&gt;

&lt;p&gt;* German&lt;/p&gt;

&lt;p&gt;* Portugese&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/2010/05/en.zip&#39;&gt;en.zip&lt;/a&gt;&lt;/p&gt;</description>
                <link>http://username.github.io/2010/05/12/tam-tam-lauches-soccerino-world-cup-2010-pool-for-sharepoint-and-facebook</link>
                <guid>http://username.github.io/2010/05/12/tam-tam-lauches-soccerino-world-cup-2010-pool-for-sharepoint-and-facebook</guid>
                <pubDate>2010-05-12T09:04:37Z</pubDate>
        </item>

        <item>
                <title>New sample project for SP2010 Word Automation: UI</title>
                <description>&lt;p&gt;I’ve just published a &lt;a href=&#39;http://sp2010wordautomation.codeplex.com/releases/view/41267&#39;&gt;second sample solution&lt;/a&gt; for the SP2010 Word Automation project on CodePlex. This solution will add a button to the Ribbon when browsing document libraries:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image9.png&#39;&gt;&lt;img alt=&#39;Ribbon button&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_thumb10.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the button is clicked a modal Dialog is shown that will allow the user to specify the options used for conversion:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image10.png&#39;&gt;&lt;img alt=&#39;Modal Dialog&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_thumb11.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When the Ok button is clicked the selected files will be added to a conversion job and the job will be started.&lt;/p&gt;

&lt;p&gt;The dialog is launched by some javascript that is specified in the CommandUIHandler section of the ribbon button definition.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xml
&amp;lt;commandUIHandler
Command=&amp;quot;SP2010WA_Convert_Button&amp;quot;
CommandAction=&amp;quot;javascript:function convertDocument() {
Sys.loadScripts([&amp;#39;/_layouts/SP2010WordAutomation.UI/SP2010WordAutomation.UI.js&amp;#39;], function() {
SP2010WordAutomation.UI.ConvertDocument();
});
}
convertDocument();&amp;quot;
EnabledScript=&amp;quot;javascript:function oneOrMoreEnable() {
var items = SP.ListOperation.Selection.getSelectedItems();
var ci = CountDictionary(items);
return (ci &amp;gt; 0);
}
oneOrMoreEnable();&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I’ve decided to use the beta version of the ASP.Net 4.0 AJAX client library to load the required scriptfile when it is actually needed. While this is not completely necessary in this case, because the amount of script in there is quite little, it could provide a speedboost because the browser won’t load and interpret the script when the page loads.&lt;/p&gt;

&lt;p&gt;The definition also contains some script to enable the button only when one or more files are selected.&lt;/p&gt;

&lt;p&gt;The following lists the script that is loaded and called when the button is clicked:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
Type.registerNamespace(&amp;quot;SP2010WordAutomation.UI&amp;quot;);
SP2010WordAutomation.UI.ConvertDocument = function () {
var items = SP.ListOperation.Selection.getSelectedItems();
var selectedItems = &amp;#39;&amp;#39;;
var k;
for (k in items) {
selectedItems += &amp;#39;|&amp;#39; + items[k].id;
}
var options = {
url: &amp;#39;/_layouts/SP2010WordAutomation.UI/ConvertDocument.aspx?items=&amp;#39; + selectedItems + &amp;#39;&amp;amp;source;=&amp;#39; + SP.ListOperation.Selection.getSelectedList(),
title: &amp;#39;Convert Documents&amp;#39;,
allowMaximize: false,
showClose: true,
width: 600,
height: 480,
dialogReturnValueCallback: SP2010WordAutomation.UI.ConvertCallback
};
SP.UI.ModalDialog.showModalDialog(options);
}
SP2010WordAutomation.UI.ConvertCallback = function(result, target) {
SP.UI.Notify.addNotification(target, false);
SP.UI.ModalDialog.RefreshPage(result);
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First I use the &lt;em&gt;Type.registerNamespace&lt;/em&gt; method that is provided by the standard SharePoint scriptlibrary to make sure I don’t override other methods with the same names.&lt;/p&gt;

&lt;p&gt;In the &lt;em&gt;ConvertDocument&lt;/em&gt; function we then launch a SharePoint dialog that will load an ApplicationPage which provides the user with the options they can choose. The &lt;em&gt;ConvertCallback&lt;/em&gt; function which is called when the dialog passes a result will add a notification message to the main screen.&lt;/p&gt;

&lt;p&gt;To see how this mechanism can be used, please refer to &lt;a href=&#39;http://blogs.msdn.com/vesku/archive/2010/02/25/how-to-sharepoint-2010-js-client-object-model-and-ui-advancements.aspx&#39;&gt;this post&lt;/a&gt; by Vesa Juvonen&lt;/p&gt;</description>
                <link>http://username.github.io/2010/03/02/new-sample-project-for-sp2010wordautomation-ui</link>
                <guid>http://username.github.io/2010/03/02/new-sample-project-for-sp2010wordautomation-ui</guid>
                <pubDate>2010-03-02T16:17:52Z</pubDate>
        </item>

        <item>
                <title>2 new worflow activities added to SP2010 Word Automation</title>
                <description>&lt;p&gt;I’ve added two new worfklow activities, Convert Folder and Convert Library, to the &lt;a href=&#39;http://sp2010wordautomation.codeplex.com&#39;&gt;SP2010 Word Automation project on CodePlex&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Because you can’t associate workflows created with SharePoint designer to libraries or folders, these actions won’t use the current item from the context, so you need to specify the input and output library or folder by url. To use the activities you can run the workflow on a other item or document. The activities locate the libraries or folders relative to the current web, so you don’t have to specify a full url:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image7.png&#39;&gt;&lt;img alt=&#39;Convert Library Activity&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_thumb7.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image8.png&#39;&gt;&lt;img alt=&#39;Convert Folder Activity&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_thumb8.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can download the latest release and source code from the &lt;a href=&#39;http://sp2010wordautomation.codeplex.com&#39;&gt;CodePlex project site&lt;/a&gt;&lt;/p&gt;</description>
                <link>http://username.github.io/2010/02/18/2-new-worflow-activities-added-to-sp2010-word-automation</link>
                <guid>http://username.github.io/2010/02/18/2-new-worflow-activities-added-to-sp2010-word-automation</guid>
                <pubDate>2010-02-18T19:56:16Z</pubDate>
        </item>

        <item>
                <title>SP2010 Installation - Error creating configuration database</title>
                <description>&lt;p&gt;When I tried to install the new RC of SharePoint 2010 on my machine, I got an &amp;#8220;Error creating configuration database&amp;#8221; message. When I went to the installation log I found a &amp;#8220;User cannot be found&amp;#8221; error. The cause was that the configuration wizard could not find the AD controller, which was easily solved by opening a VPN connection as I was working from home.&lt;/p&gt;</description>
                <link>http://username.github.io/2010/02/11/sp2010-installation-error-creating-configuration-database</link>
                <guid>http://username.github.io/2010/02/11/sp2010-installation-error-creating-configuration-database</guid>
                <pubDate>2010-02-11T19:32:03Z</pubDate>
        </item>

        <item>
                <title>CodePlex project for Word Automation Services</title>
                <description>&lt;p&gt;I’ve just published the first release for a &lt;a href=&#39;http://sp2010wordautomation.codeplex.com&#39;&gt;CodePlex project&lt;/a&gt; I started to provide sample projects / solutions for using the Word Automation Services in SharePoint 2010.&lt;/p&gt;

&lt;p&gt;Word Automation Services allow you to convert document to and from different formats.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;File formats the service can read:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;Office Open XML (DOCX, DOCM, DOTX, DOTM)&lt;/em&gt; * &lt;em&gt;Word 97-2003 Document (DOC) and Word 97-2003 Template (DOT)&lt;/em&gt; * &lt;em&gt;Rich Text Format (RTF)&lt;/em&gt; * &lt;em&gt;Single File Web Page (MHTML)&lt;/em&gt; * &lt;em&gt;HTML&lt;/em&gt; * &lt;em&gt;Word 2003 XML&lt;/em&gt; * &lt;em&gt;Word 2007/2010 XML&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;File formats the service can write:&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;* &lt;em&gt;PDF&lt;/em&gt; * &lt;em&gt;XPS&lt;/em&gt; * &lt;em&gt;Office Open XML (DOCX, DOCM)&lt;/em&gt; * &lt;em&gt;Word 97-2003 Document (DOC)&lt;/em&gt; * &lt;em&gt;Rich Text Format (RTF)&lt;/em&gt; * &lt;em&gt;Single File Web Page (MHTML)&lt;/em&gt; * &lt;em&gt;Word 2007/2010 XML&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;(&lt;a href=&#39;http://blogs.msdn.com/microsoft_office_word/archive/2009/12/16/Word-Automation-Services_3A00_-What-It-Does.aspx&#39;&gt;source&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;As far as I’ve found out, there are no UI features available out-of-the-box to use these services, so I’ve decided to create some. The first one is a custom workflow action you can use in SharePoint Designer to convert a document to many of the supported formats.&lt;/p&gt;

&lt;p&gt;In the workflow designer you can add the “Convert Document” action:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping.png&#39;&gt;&lt;img alt=&#39;Workflow Actions&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping1.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The action is inserted into the workflow step where you can specify the url of the output file, select the output format and save options and select a variable for storing the conversion job id (which you can use later to retrieve the status, as the job runs asynchronous):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping2.png&#39;&gt;&lt;img alt=&#39;Convert document action&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping3.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping4.png&#39;&gt;&lt;img alt=&#39;Save Behaviour&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping5.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The job id is also logged into the Workflow History Log (the second entry is from a second workflow action that logs the returned conversion job id variable):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping6.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping7.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After the job has run, which can take up to a few minutes (depending on the word automation services settings), the converted document appears in the library:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping8.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping9.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The custom workflow action is one of the first features for Word Automation in SharePoint 2010 I’ve planned to release. Other features will be a Ribbon and Item context menu extension and more Workflow actions.&lt;/p&gt;

&lt;p&gt;Let me know if you have any suggestions for improvement or other functionality you would like to see.&lt;/p&gt;</description>
                <link>http://username.github.io/2010/01/13/codeplex-project-for-word-automation-services</link>
                <guid>http://username.github.io/2010/01/13/codeplex-project-for-word-automation-services</guid>
                <pubDate>2010-01-13T14:27:45Z</pubDate>
        </item>

        <item>
                <title>Force Visual Studio 2010 to add a SafeControl Entry</title>
                <description>&lt;p&gt;When you create a project in Visual Studio 2010 on one of the SharePoint project templates it will take care of all the packaging for you.&lt;/p&gt;

&lt;p&gt;But when I was working on a project with custom workflow actions, the &lt;a href=&#39;http://blog.petergerritsen.nl/2010/01/11/getting-custom-workflow-activities-into-sharepoint-designer-2010/&#39;&gt;SafeControl entry that is needed for making it work&lt;/a&gt; was not added to the generated manifest.xml file.&lt;/p&gt;

&lt;p&gt;Fortunately the package designer allows you to modify the template file it uses for generating this file. So open up the package designer, switch to the “Manifest” tab and add the assembly reference in the template yourself, but this time, include the SafeControl entry:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_2.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_thumb9.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can safely use the SharePoint project tokens in there as well, but only for the SafeControl entry. When you put it into the Assembly entry, the package generator won’t understand it and will add another assembly reference for the project output:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_4.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_thumb_1.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
                <link>http://username.github.io/2010/01/11/force-visual-studio-2010-to-add-a-safecontrol-entry</link>
                <guid>http://username.github.io/2010/01/11/force-visual-studio-2010-to-add-a-safecontrol-entry</guid>
                <pubDate>2010-01-11T19:44:00Z</pubDate>
        </item>

        <item>
                <title>Getting Custom Workflow Activities into SharePoint Designer 2010</title>
                <description>&lt;p&gt;Developing a custom workflow activity for SharePoint 2010 doesn’t differ that much from developing one for the MOSS 2007 platform. So by following the different articles on that you will be able to create one with ease.&lt;/p&gt;

&lt;p&gt;SharePoint 2010 still uses the same mechanism with an .ACTIONS file and adding an “authorizedType” element to your web.config. I was unsuccessful however in getting the activity to show up in SharePoint Designer 2010.&lt;/p&gt;

&lt;p&gt;After adding a “SafeControl” entry to the web.config the activity did show up. As far as I can see this is the only thing different to the steps you have to take in MOSS 2007.&lt;/p&gt;</description>
                <link>http://username.github.io/2010/01/11/getting-custom-workflow-activities-into-sharepoint-designer-2010</link>
                <guid>http://username.github.io/2010/01/11/getting-custom-workflow-activities-into-sharepoint-designer-2010</guid>
                <pubDate>2010-01-11T19:15:00Z</pubDate>
        </item>

        <item>
                <title>SharePoint Server 2010 User Profile System</title>
                <description>&lt;p&gt;In SharePoint 2010 there are quite a few interesting changes to the User Profile System. In this post I will outline some of them.&lt;/p&gt;

&lt;h3 id=&#39;profile_types&#39;&gt;Profile types&lt;/h3&gt;

&lt;p&gt;You can specify sub-types for profiles. For each profile property you can configure for which types the property is used. A user will be able to see or edit only those properties that are linked to their Profile type:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_thumb.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the Profile list or Profile property list you can filter the list by profile sub-type:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image1.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_thumb1.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#39;organization_profiles&#39;&gt;Organization profiles&lt;/h3&gt;

&lt;p&gt;You can now import organizations from your profile store. This includes options for importing organizations in a hierarchy. The organization profile system also supports specification of Profile Types, so different types of organizations can have different properties.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image2.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_thumb2.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The hierarchy is specified by selecting a parent organization in an organization profile. You can also specify the leaders of an organization and the members of that organization. This will link the specified user profiles to this organization:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image3.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_thumb3.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#39;property_synchronization&#39;&gt;Property Synchronization&lt;/h3&gt;

&lt;p&gt;Profile properties can now be exported as well. This allows for users to edit a property value which is then updated in your identity store such as Active Directory:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image4.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_thumb4.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This sync is one way only, so a property can be imported or exported, but there’s no option to keep the two values in sync in a bi-directional way. Export to BCS sources is also not supported.&lt;/p&gt;

&lt;h3 id=&#39;term_store_used_for_choices&#39;&gt;Term store used for choices&lt;/h3&gt;

&lt;p&gt;Properties that are defined with choices are linked to the Term store. So there’s a single management system for choice fields across the SharePoint farm:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image5.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_thumb5.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The property will use the configuration of the Term set to define if users are allowed to use fill-in choices.&lt;/p&gt;

&lt;h3 id=&#39;multiple_import_connections&#39;&gt;Multiple import connections&lt;/h3&gt;

&lt;p&gt;In SharePoint 2007 you were only able to import from one primary store. So importing from 2 or more Active Directories or a custom user database was not supported. In 2010 this is supported. You can now specify more then 1 import connection to import accounts from AD as well as a LDAP or BCS store.&lt;/p&gt;

&lt;h3 id=&#39;import_filters&#39;&gt;Import filters&lt;/h3&gt;

&lt;p&gt;You can specify exclusion filters for your import connections. This will allow you to filter out user or organization profiles when importing from you identity store:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image6.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/image_thumb6.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#39;conclusion&#39;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The SharePoint team has done quite a big overhaul on the user profile system. A lot of pain points from MOSS 2007 have been solved, the system allows for more granualarity in configuration of the profiles and has been integrated nicely with new functionality such as the Term store (a.k.a. Managed Metadata Service)&lt;/p&gt;</description>
                <link>http://username.github.io/2010/01/07/sharepoint-server-2010-user-profile-system</link>
                <guid>http://username.github.io/2010/01/07/sharepoint-server-2010-user-profile-system</guid>
                <pubDate>2010-01-07T09:47:00Z</pubDate>
        </item>

        <item>
                <title>Issues deploying FAST Search Server 2010 Beta</title>
                <description>&lt;p&gt;I just had a tough time deploy FAST Search Server 2010 Beta on a new SharePoint 2010 farm. Upon searching the internet it looked like I had the same issue as loads of other people, a not complete/wrong installation guide. But even after reviewing the posts in &lt;a href=&#39;http://social.technet.microsoft.com/Forums/en-ZA/sharepoint2010setup/thread/f653c63c-34ff-4215-bfbc-17d3d26bd6c9&#39;&gt;this&lt;/a&gt; thread and reading the &lt;a href=&#39;http://blogs.msdn.com/mberry/archive/2009/12/04/configuring-sharepoint-2010-for-fast-search-server-query-and-admin.aspx&#39;&gt;post&lt;/a&gt; from Manfred Berry, I was unsuccessful in getting FAST to work.&lt;/p&gt;

&lt;p&gt;Until I dove into the logs on the FAST server, which is something I always postpone due to the overload of information in there. I found an error mentioning “Unrecognized attribute &amp;#8216;allowInsecureTransport&amp;#8217;”, caused by the dreaded WCF issue that needs the same hotfix as metioned &lt;a href=&#39;http://blogs.msdn.com/sharepoint/archive/2009/11/19/installation-notice-for-the-sharepoint-server-public-beta-on-microsoft-windows-server-2008-r2-and-microsoft-windows-7.aspx&#39;&gt;here&lt;/a&gt;. So not only install the hotfix on your SharePoint servers but also on your FAST servers, which seems kind of logical now I think of that.&lt;/p&gt;</description>
                <link>http://username.github.io/2010/01/05/issues-deploying-fast-search-server-2010-beta</link>
                <guid>http://username.github.io/2010/01/05/issues-deploying-fast-search-server-2010-beta</guid>
                <pubDate>2010-01-05T13:50:00Z</pubDate>
        </item>

        <item>
                <title>InfoPath Form Template stays in “installing” state</title>
                <description>&lt;p&gt;When I was testing to deploy a solution containing some form templates I got an error. Not very strange, because I was testing it.&lt;/p&gt;

&lt;p&gt;The main downside though was one of the templates remained in the installing state. Apparently the easiest way to remove this template is by using some custom code, in this case I just used a console application within my dev box:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
static void Main(string[] args)
{
    FormsService fs = SPFarm.Local.Services.GetValue(&amp;quot;&amp;quot;);
    foreach (FormTemplate ft in fs.FormTemplates)
    {
        if (ft.Name.Contains(&amp;quot;Blackberry&amp;quot;))
        {
            ft.Delete();
        }
    }
}
&lt;/code&gt;&lt;/p&gt;</description>
                <link>http://username.github.io/2009/12/01/infopath-form-template-stays-in-e2809cinstallinge2809d-state</link>
                <guid>http://username.github.io/2009/12/01/infopath-form-template-stays-in-e2809cinstallinge2809d-state</guid>
                <pubDate>2009-12-01T10:47:57Z</pubDate>
        </item>

        <item>
                <title>Provisioning a Document Set</title>
                <description>&lt;p&gt;In this post I’ll show you how to create a project in Visual Studio 2010 with the new SharePoint project and item templates to provision a Document Set from a feature.&lt;/p&gt;

&lt;p&gt;DISCLAIMER: The examples are build on and tested against a Beta 1 build of SharePoint 2010 and a Beta 1 build of Visual Studio 2010, so there is no guarantee this will work on later versions or even on the Beta 1 build you&amp;#8217;re running.&lt;/p&gt;

&lt;p&gt;A Document Set is basically a content type just like all the others you can find in SharePoint, it derives from the Folder content type. So the steps you need to take to provision a Document Set content type are not that different as well.&lt;/p&gt;

&lt;p&gt;We’ll start out by creating an empty SharePoint project in Visual Studio 2010 and work from there.&lt;/p&gt;

&lt;p&gt;First we’ll add a Content Type item to the project. In the elements.xml file we place the following content:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;elements xmlns=&amp;quot;http://schemas.microsoft.com/sharepoint/&amp;quot;&amp;gt;
&amp;lt;contentType ID=&amp;quot;0x0120D520002228EBDE71841343B23171CE351F7D39&amp;quot; Name=&amp;quot;Test Doc Set&amp;quot; Group=&amp;quot;Document Set Content Types&amp;quot; Version=&amp;quot;2&amp;quot; ProgId=&amp;quot;SharePoint.DocumentSet&amp;quot;&amp;gt;
&amp;lt;folder TargetName=&amp;quot;_cts/Test Doc Set&amp;quot; /&amp;gt;
&amp;lt;fieldRefs&amp;gt;
&amp;lt;fieldRef ID=&amp;quot;{038d1503-4629-40f6-adaf-b47d1ab2d4fe}&amp;quot; Name=&amp;quot;Company&amp;quot; /&amp;gt;
&amp;lt;/fieldRefs&amp;gt;
&amp;lt;xmlDocuments&amp;gt;
&amp;lt;xmlDocument NamespaceURI=&amp;quot;http://schemas.microsoft.com/sharepoint/events&amp;quot;&amp;gt;
&amp;lt;spe:Receivers xmlns:spe=&amp;quot;http://schemas.microsoft.com/sharepoint/events&amp;quot;&amp;gt;
&amp;lt;receiver&amp;gt;
&amp;lt;name&amp;gt;DocumentSet ItemUpdated&amp;lt;/name&amp;gt;
&amp;lt;synchronization&amp;gt;Synchronous&amp;lt;/synchronization&amp;gt;
&amp;lt;type&amp;gt;10002&amp;lt;/type&amp;gt;
&amp;lt;sequenceNumber&amp;gt;100&amp;lt;/sequenceNumber&amp;gt;
&amp;lt;assembly&amp;gt;Microsoft.Office.DocumentManagement, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c&amp;lt;/assembly&amp;gt;
&amp;lt;class&amp;gt;Microsoft.Office.DocumentManagement.DocumentSets.DocumentSetEventReceiver&amp;lt;/class&amp;gt;
&amp;lt;data /&amp;gt;
&amp;lt;filter /&amp;gt;
&amp;lt;/receiver&amp;gt;
&amp;lt;receiver&amp;gt;
&amp;lt;name&amp;gt;DocumentSet ItemAdded&amp;lt;/name&amp;gt;
&amp;lt;synchronization&amp;gt;Synchronous&amp;lt;/synchronization&amp;gt;
&amp;lt;type&amp;gt;10001&amp;lt;/type&amp;gt;
&amp;lt;sequenceNumber&amp;gt;100&amp;lt;/sequenceNumber&amp;gt;
&amp;lt;assembly&amp;gt;Microsoft.Office.DocumentManagement, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c&amp;lt;/assembly&amp;gt;
&amp;lt;class&amp;gt;Microsoft.Office.DocumentManagement.DocumentSets.DocumentSetItemsEventReceiver&amp;lt;/class&amp;gt;
&amp;lt;data /&amp;gt;
&amp;lt;filter /&amp;gt;
&amp;lt;/receiver&amp;gt;
&amp;lt;/spe:Receivers&amp;gt;
&amp;lt;/xmlDocument&amp;gt;
&amp;lt;xmlDocument NamespaceURI=&amp;quot;http://schemas.microsoft.com/office/documentsets/allowedcontenttypes&amp;quot;&amp;gt;
&amp;lt;act:AllowedContentTypes xmlns:act=&amp;quot;http://schemas.microsoft.com/office/documentsets/allowedcontenttypes&amp;quot; LastModified=&amp;quot;11/4/2009 3:30:17 PM&amp;quot;&amp;gt;
&amp;lt;allowedContentType id=&amp;quot;0x0101&amp;quot; /&amp;gt;
&amp;lt;/act:AllowedContentTypes&amp;gt;
&amp;lt;/xmlDocument&amp;gt;
&amp;lt;xmlDocument NamespaceURI=&amp;quot;http://schemas.microsoft.com/office/documentsets/sharedfields&amp;quot;&amp;gt;
&amp;lt;sf:SharedFields xmlns:sf=&amp;quot;http://schemas.microsoft.com/office/documentsets/sharedfields&amp;quot; LastModified=&amp;quot;11/4/2009 3:31:50 PM&amp;quot;&amp;gt;
&amp;lt;sharedField id=&amp;quot;cbb92da4-fd46-4c7d-af6c-3128c2a5576e&amp;quot; /&amp;gt;
&amp;lt;sharedField id=&amp;quot;038d1503-4629-40f6-adaf-b47d1ab2d4fe&amp;quot; /&amp;gt;
&amp;lt;/sf:SharedFields&amp;gt;
&amp;lt;/xmlDocument&amp;gt;
&amp;lt;xmlDocument NamespaceURI=&amp;quot;http://schemas.microsoft.com/office/documentsets/welcomepagefields&amp;quot;&amp;gt;
&amp;lt;wpf:AllowedContentTypes xmlns:wpf=&amp;quot;http://schemas.microsoft.com/office/documentsets/welcomepagefields&amp;quot; LastModified=&amp;quot;11/4/2009 3:31:50 PM&amp;quot;&amp;gt;
&amp;lt;welcomePageField id=&amp;quot;038d1503-4629-40f6-adaf-b47d1ab2d4fe&amp;quot; /&amp;gt;
&amp;lt;/wpf:AllowedContentTypes&amp;gt;
&amp;lt;/xmlDocument&amp;gt;
&amp;lt;xmlDocument NamespaceURI=&amp;quot;http://schemas.microsoft.com/office/documentsets/defaultdocuments&amp;quot;&amp;gt;
&amp;lt;dd:DefaultDocuments xmlns:dd=&amp;quot;http://schemas.microsoft.com/office/documentsets/defaultdocuments&amp;quot; LastModified=&amp;quot;11/5/2009 8:39:24 AM&amp;quot; AddSetName=&amp;quot;True&amp;quot;&amp;gt;
&amp;lt;defaultDocument name=&amp;quot;Enterprise Content Management.docx&amp;quot; idContentType=&amp;quot;0x0101&amp;quot; /&amp;gt;
&amp;lt;defaultDocument name=&amp;quot;Extending Search.docx&amp;quot; idContentType=&amp;quot;0x0101&amp;quot; /&amp;gt;
&amp;lt;/dd:DefaultDocuments&amp;gt;
&amp;lt;/xmlDocument&amp;gt;
&amp;lt;xmlDocument NamespaceURI=&amp;quot;http://schemas.microsoft.com/sharepoint/v3/contenttype/forms&amp;quot;&amp;gt;
&amp;lt;formTemplates xmlns=&amp;quot;http://schemas.microsoft.com/sharepoint/v3/contenttype/forms&amp;quot;&amp;gt;
&amp;lt;display&amp;gt;DocSetDisplayForm&amp;lt;/display&amp;gt;
&amp;lt;edit&amp;gt;ListForm&amp;lt;/edit&amp;gt;
&amp;lt;new&amp;gt;DocSetDisplayForm&amp;lt;/new&amp;gt;
&amp;lt;/formTemplates&amp;gt;
&amp;lt;/xmlDocument&amp;gt;
&amp;lt;xmlDocument NamespaceURI=&amp;quot;http://schemas.microsoft.com/sharepoint/v3/contenttype/forms/url&amp;quot;&amp;gt;
&amp;lt;formUrls xmlns=&amp;quot;http://schemas.microsoft.com/sharepoint/v3/contenttype/forms/url&amp;quot;&amp;gt;
&amp;lt;new&amp;gt;_layouts/NewDocSet.aspx&amp;lt;/new&amp;gt;
&amp;lt;/formUrls&amp;gt;
&amp;lt;/xmlDocument&amp;gt;
&amp;lt;/xmlDocuments&amp;gt;
&amp;lt;/contentType&amp;gt;
&amp;lt;/elements&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the basics are the same as for any content type. The main difference is in all the XmlDocument elements in there:&lt;/p&gt;

&lt;p&gt;* Some event handlers are hooked up to make sure the metadata gets pushed down into the child documents (plus some other stuff) * The content types that users are allowed to add to the set are specified * We specify which fields are shared between the documents the set contains * The fields that are shown on the welcome page are defined as well * We then specify if there’s default content to add when a new Document Set is created&lt;/p&gt;

&lt;p&gt;After we’ve created the basic plumbing for the Document Set content type, we’ll need to make sure that the files that are required are created in the right place as well. In order to accomplish this we’ll add a SharePoint Module item to the solution. This module will create the welcome page and default content in the right location in the site collection. The element.xml file will contain the following content:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;elements xmlns=&amp;quot;http://schemas.microsoft.com/sharepoint/&amp;quot;&amp;gt;
&amp;lt;module Name=&amp;quot;_ctsTest Doc Set_&amp;quot; HyperlinkBaseUrl=&amp;quot;http://moss.contoso.com/sites/docsettest&amp;quot; Path=&amp;quot;WelcomePages\Files\_cts\Test Doc Set&amp;quot; Url=&amp;quot;_cts/Test Doc Set&amp;quot;&amp;gt;
&amp;lt;file Url=&amp;quot;docsethomepage.aspx&amp;quot; Path=&amp;quot;docsethomepage.aspx&amp;quot;&amp;gt;
&amp;lt;allUsersWebPart WebPartOrder=&amp;quot;0&amp;quot; WebPartZoneID=&amp;quot;WebPartZone_TopLeft&amp;quot; ID=&amp;quot;g_ae6da3d4_9233_45d6_b9fd_6300815e16c6&amp;quot;&amp;gt;
&amp;lt;![CDATA[Content omitted]]&amp;gt;
&amp;lt;/allUsersWebPart&amp;gt;
&amp;lt;allUsersWebPart WebPartOrder=&amp;quot;0&amp;quot; WebPartZoneID=&amp;quot;WebPartZone_CenterMain&amp;quot; ID=&amp;quot;g_d8062545_cc87_4e82_9c55_cae80486ffea&amp;quot;&amp;gt;
&amp;lt;![CDATA[Content omitted]]&amp;gt;
&amp;lt;/allUsersWebPart&amp;gt;
&amp;lt;allUsersWebPart WebPartOrder=&amp;quot;0&amp;quot; WebPartZoneID=&amp;quot;WebPartZone_Top&amp;quot; ID=&amp;quot;g_651be1ba_c8bb_4d29_87b0_87c769cd5179&amp;quot;&amp;gt;
&amp;lt;![CDATA[Content omitted]]&amp;gt;
&amp;lt;/allUsersWebPart&amp;gt;
&amp;lt;/file&amp;gt;
&amp;lt;file Path=&amp;quot;Enterprise Content Management.docx&amp;quot; Url=&amp;quot;Enterprise Content Management.docx&amp;quot; /&amp;gt;
&amp;lt;file Path=&amp;quot;Extending Search.docx&amp;quot; Url=&amp;quot;Extending Search.docx&amp;quot; /&amp;gt;
&amp;lt;/module&amp;gt;
&amp;lt;/elements&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We see that the page layout for the document set homepage is created in the _cts folder for the content type. The web parts that are placed on the page are configured here as well, so any modifications and additions will be used on the welcome page of all document sets based in this content type. Also the two documents for the default content are placed in the corresponding _cts folder in the site collection.&lt;/p&gt;

&lt;p&gt;The final Visual Studio solution will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping10.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping11.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After deploying the solution and activating the feature, which is very easy to do with the new SharePoint stuff in Visual Studio (just press ctrl + f5), we can see that the _cts folder will be created in the site collection:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping12.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping13.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After we add the content type to a document library and create a new item based on the content type we’ll be presented with the following:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping14.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping15.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can download the sample solution here: &lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/DocSetProvisioning.zip&#39;&gt;DocSetProvisioning.zip (62,88 KB)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DISCLAIMER: This hasn&amp;#8217;t been properly tested, so there&amp;#8217;s is no guarantee it will work. If it f@#@s up your farm, the most you can expect as support from me, is an email wishing you good luck with restoring it.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/11/06/sp2010-provisioning-a-document-set</link>
                <guid>http://username.github.io/2009/11/06/sp2010-provisioning-a-document-set</guid>
                <pubDate>2009-11-06T17:32:27Z</pubDate>
        </item>

        <item>
                <title>Coding against a Document Set</title>
                <description>&lt;p&gt;I’ve just had a 5 day training on development for SharePoint 2010. We’ve seen some cool stuff, were able to do some Hands on Labs and talk to other SharePoint experts about the new stuff that is coming up.&lt;/p&gt;

&lt;p&gt;One of the best things though about this training was the ability to try some stuff out for yourself. The fact that no project managers or customers were bothering me for a week allowed me to finally take the time to look around in the object model, the central admin and the new front end interfaces.&lt;/p&gt;

&lt;p&gt;Over the next few week I’ll be publishing some post on the things I’ve tried out.I hope to publish a lot more posts about SP2010 once Beta 2 comes available.&lt;/p&gt;

&lt;p&gt;DISCLAIMER: The examples are build on and tested against a Beta 1 build of SharePoint 2010 and a Beta 1 build of Visual Studio 2010, so there is no guarantee this will work on later versions.&lt;/p&gt;

&lt;p&gt;One of the things I was eager to try out is the new Document Sets feature. Document Sets allow you to group related documents together and share metadata between those docs. When you view a document set in a library, you are presented with a welcome page that shows the metadata of the set and the contents. The welcome page in itself is something you’re able to customize. So you can add web parts and other controls through the interface or SharePoint Designer to the welcome page.&lt;/p&gt;

&lt;p&gt;First let me start by giving you some code you can use to show extra information about the document set in a web part you can place on the welcome page:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
try
{
     SPListItem item = SPContext.Current.ListItem;
     DocumentSet set = DocumentSet.GetDocumentSet(item.Folder);
     writer.WriteLine(&amp;quot;ContentType: {0}&amp;lt;br/&amp;gt;&amp;quot;, item.ContentType.Name);
     writer.WriteLine(&amp;quot;Title: {0}&amp;lt;br/&amp;gt;&amp;quot;, item.Title);
     writer.WriteLine(&amp;quot;WelcomePageUrl: {0}&amp;lt;br/&amp;gt;&amp;quot;, set.WelcomePageUrl);
     writer.WriteLine(&amp;quot;ItemCount: {0}&amp;lt;br/&amp;gt;&amp;quot;, set.Folder.ItemCount);
     writer.WriteLine(&amp;quot;Welcomepage Fields:&amp;lt;br/&amp;gt;&amp;quot;);
     DocumentSetTemplate template = set.ContentTypeTemplate;
     WelcomePageFieldCollection fields = template.WelcomePageFields;
     foreach (SPField field in fields)
     {
         writer.WriteLine(&amp;quot;{0}&amp;lt;br/&amp;gt;&amp;quot;, field.Title);
     }
}
catch (Exception)
{ }
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;First we get a reference to the current List Item through the SPContext. This list item is the main item for the document set that contains the metadata that is pushed into the child documents.&lt;/p&gt;

&lt;p&gt;We then can get a reference to the DocumentSet by passing in the SPFolder of the item into a static method of the DocumentSet class. The DocumentSet class is stored in the Microsoft.Office.DocumentManagement.dll in the DocumentSets namespace.&lt;/p&gt;

&lt;p&gt;The DocumentSetTemplate in turn contains more information about the fields that are shared or shown on the Welcome page.&lt;/p&gt;

&lt;p&gt;In the next post I’ll show you how to provision a document set from a feature. Something that is quite easy to do with the new SharePoint project and item templates for Visual Studio 2010.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/11/06/coding-against-a-document-set</link>
                <guid>http://username.github.io/2009/11/06/coding-against-a-document-set</guid>
                <pubDate>2009-11-06T16:56:31Z</pubDate>
        </item>

        <item>
                <title>DateTimeField vs. FieldValue in a publishing page</title>
                <description>&lt;p&gt;In one of our projects we needed to show the Modified date and time value in publishing page.&lt;/p&gt;

&lt;p&gt;Not a big deal you would think. The only issue we had when using a FieldValue control is that the time that would be displayed was 1 or 2 hours later than the actual value.&lt;/p&gt;

&lt;p&gt;After I changed this to a DateTimeField the difference was gone.&lt;/p&gt;

&lt;p&gt;The only thing you need to add is a ControlMode=”Display” attribute to prevent editors from setting their own value in edit mode.&lt;/p&gt;

&lt;p&gt;The difference is in the way the value is rendered. The FieldValue control does a ToString() and HtmlEncode on the value. The DateTimeField actually converts the value to local time by using the TimeZone class.&lt;/p&gt;

&lt;p&gt;It’s all in the details!&lt;/p&gt;</description>
                <link>http://username.github.io/2009/10/30/datetimefield-vs-fieldvalue-in-a-publishing-page</link>
                <guid>http://username.github.io/2009/10/30/datetimefield-vs-fieldvalue-in-a-publishing-page</guid>
                <pubDate>2009-10-30T13:48:04Z</pubDate>
        </item>

        <item>
                <title>BadImageFormatException when updating a Dynamics CRM Plug-in</title>
                <description>&lt;p&gt;Today I was working on a Dynamics CRM 4.0 Plug-in we’ve developed in the past and I needed to update the plug-in on our CRM server.&lt;/p&gt;

&lt;p&gt;When I loaded the assembly in the Plug-in Registration tool I got the following exception:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
    Unhandled Exception: System.BadImageFormatException: Could not load file or assembly &amp;#39;Microsoft.Crm.Sdk, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35&amp;#39; or one of its dependencies.
    An attempt was made to load a program with an incorrect format.
       at System.Reflection.Assembly._GetExportedTypes()
       at PluginRegistrationTool.AssemblyReader.RetrievePluginsFromAssembly(String path)
       at PluginRegistrationTool.AssemblyReader.RetrievePluginsFromAssembly(String path)
       at PluginRegistrationTool.RegistrationHelper.RetrievePluginsFromAssembly(String pathToAssembly)
       at PluginRegistrationTool.PluginRegistrationForm.btnLoadAssembly_Click(Object sender, EventArgs e)
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Appearently this was due to the fact I was working on a 64 bit environment. When you place the tool in the 64bit folder of the sdk\bin folder, the error doesn’t occur anymore and you’ll be able to succesfully update your plug-in.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/09/29/badimageformatexception-when-updating-a-dynamics-crm-plug-in</link>
                <guid>http://username.github.io/2009/09/29/badimageformatexception-when-updating-a-dynamics-crm-plug-in</guid>
                <pubDate>2009-09-29T16:57:24Z</pubDate>
        </item>

        <item>
                <title>Silverlight: Multiple animations on one property through Transforms</title>
                <description>&lt;p&gt;When you create two or more animations that work on the same property of an object, Silverlight will only use the last of the defined animations.&lt;/p&gt;

&lt;p&gt;By using transforms you’re able to achieve the same effect anyway. For instance, I’ve got a rectangle that slides up and down by using an animation that works on the Canvas.Top property:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xml
&amp;lt;userControl x:Class=&amp;quot;TestAnimationTransform.MainPage&amp;quot;
xmlns=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&amp;quot;
xmlns:x=&amp;quot;http://schemas.microsoft.com/winfx/2006/xaml&amp;quot;
xmlns:d=&amp;quot;http://schemas.microsoft.com/expression/blend/2008&amp;quot; xmlns:mc=&amp;quot;http://schemas.openxmlformats.org/markup-compatibility/2006&amp;quot;
mc:Ignorable=&amp;quot;d&amp;quot; d:DesignWidth=&amp;quot;640&amp;quot; d:DesignHeight=&amp;quot;480&amp;quot;&amp;gt;
&amp;lt;userControl.Resources&amp;gt;
&amp;lt;storyboard x:Name=&amp;quot;WaveTop&amp;quot; AutoReverse=&amp;quot;True&amp;quot; RepeatBehavior=&amp;quot;Forever&amp;quot;&amp;gt;
&amp;lt;doubleAnimationUsingKeyFrames x:Name=&amp;quot;WaveAnimationTop&amp;quot; BeginTime=&amp;quot;00:00:00&amp;quot; Storyboard.TargetName=&amp;quot;Rectangle&amp;quot; Storyboard.TargetProperty=&amp;quot;(canvas.top)&amp;quot;&amp;gt;
&amp;lt;easingDoubleKeyFrame KeyTime=&amp;quot;00:00:00&amp;quot; Value=&amp;quot;50&amp;quot;&amp;gt;
&amp;lt;easingDoubleKeyFrame.EasingFunction&amp;gt;
&amp;lt;sineEase EasingMode=&amp;quot;EaseInOut&amp;quot;/&amp;gt;
&amp;lt;/easingDoubleKeyFrame.EasingFunction&amp;gt;
&amp;lt;/easingDoubleKeyFrame&amp;gt;
&amp;lt;easingDoubleKeyFrame KeyTime=&amp;quot;00:00:10&amp;quot; Value=&amp;quot;400&amp;quot;&amp;gt;
&amp;lt;easingDoubleKeyFrame.EasingFunction&amp;gt;
&amp;lt;sineEase EasingMode=&amp;quot;EaseInOut&amp;quot;/&amp;gt;
&amp;lt;/easingDoubleKeyFrame.EasingFunction&amp;gt;
&amp;lt;/easingDoubleKeyFrame&amp;gt;
&amp;lt;/doubleAnimationUsingKeyFrames&amp;gt;
&amp;lt;/storyboard&amp;gt;
&amp;lt;/userControl.Resources&amp;gt;
&amp;lt;canvas x:Name=&amp;quot;LayoutRoot&amp;quot;&amp;gt;
&amp;lt;rectangle x:Name=&amp;quot;Rectangle&amp;quot; Fill=&amp;quot;Blue&amp;quot; Width=&amp;quot;50&amp;quot; Height=&amp;quot;50&amp;quot; Canvas.Top=&amp;quot;240&amp;quot; Canvas.Left=&amp;quot;200&amp;quot;&amp;gt;
&amp;lt;/rectangle&amp;gt;
&amp;lt;/canvas&amp;gt;
&amp;lt;userControl&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create an effect like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://go.microsoft.com/fwlink/?LinkID=149156&#39;&gt;&lt;img alt=&#39;Install Microsoft Silverlight&#39; src=&#39;/wp-content/uploads/sl4wp-ph.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If I want to apply an animation that jiggles the rectangle back and forth over the X- and Y-axis, I can’t use the Canvas.Top property anymore. So instead, we’ll add a Transform to the object and animate the properties of the Transform:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xml
&amp;lt;storyboard x:Name=&amp;quot;WaveJiggle&amp;quot; AutoReverse=&amp;quot;True&amp;quot; RepeatBehavior=&amp;quot;Forever&amp;quot;&amp;gt;
&amp;lt;doubleAnimationUsingKeyFrames x:Name=&amp;quot;XAnimation&amp;quot; BeginTime=&amp;quot;00:00:00&amp;quot; Storyboard.TargetName=&amp;quot;TranslateTransform&amp;quot; Storyboard.TargetProperty=&amp;quot;X&amp;quot;&amp;gt;
&amp;lt;easingDoubleKeyFrame KeyTime=&amp;quot;00:00:00&amp;quot; Value=&amp;quot;20&amp;quot;&amp;gt;
&amp;lt;easingDoubleKeyFrame.EasingFunction&amp;gt;
&amp;lt;sineEase EasingMode=&amp;quot;EaseInOut&amp;quot;/&amp;gt;
&amp;lt;/easingDoubleKeyFrame.EasingFunction&amp;gt;
&amp;lt;/easingDoubleKeyFrame&amp;gt;
&amp;lt;easingDoubleKeyFrame KeyTime=&amp;quot;00:00:01&amp;quot; Value=&amp;quot;80&amp;quot;&amp;gt;
&amp;lt;easingDoubleKeyFrame.EasingFunction&amp;gt;
&amp;lt;sineEase EasingMode=&amp;quot;EaseInOut&amp;quot;/&amp;gt;
&amp;lt;/easingDoubleKeyFrame.EasingFunction&amp;gt;
&amp;lt;/easingDoubleKeyFrame&amp;gt;
&amp;lt;/doubleAnimationUsingKeyFrames&amp;gt;
&amp;lt;doubleAnimationUsingKeyFrames x:Name=&amp;quot;YAnimation&amp;quot; BeginTime=&amp;quot;00:00:00&amp;quot; Storyboard.TargetName=&amp;quot;TranslateTransform&amp;quot; Storyboard.TargetProperty=&amp;quot;Y&amp;quot;&amp;gt;
&amp;lt;easingDoubleKeyFrame KeyTime=&amp;quot;00:00:00&amp;quot; Value=&amp;quot;20&amp;quot;&amp;gt;
&amp;lt;easingDoubleKeyFrame.EasingFunction&amp;gt;
&amp;lt;sineEase EasingMode=&amp;quot;EaseInOut&amp;quot;/&amp;gt;
&amp;lt;/easingDoubleKeyFrame.EasingFunction&amp;gt;
&amp;lt;/easingDoubleKeyFrame&amp;gt;
&amp;lt;easingDoubleKeyFrame KeyTime=&amp;quot;00:00:01&amp;quot; Value=&amp;quot;80&amp;quot;&amp;gt;
&amp;lt;easingDoubleKeyFrame.EasingFunction&amp;gt;
&amp;lt;sineEase EasingMode=&amp;quot;EaseInOut&amp;quot;/&amp;gt;
&amp;lt;/easingDoubleKeyFrame.EasingFunction&amp;gt;
&amp;lt;/easingDoubleKeyFrame&amp;gt;
&amp;lt;/doubleAnimationUsingKeyFrames&amp;gt;
&amp;lt;/storyboard&amp;gt;
&amp;lt;rectangle x:Name=&amp;quot;Rectangle&amp;quot; Fill=&amp;quot;Blue&amp;quot; Width=&amp;quot;50&amp;quot; Height=&amp;quot;50&amp;quot; Canvas.Top=&amp;quot;240&amp;quot; Canvas.Left=&amp;quot;200&amp;quot;&amp;gt;
&amp;lt;rectangle.RenderTransform&amp;gt;
&amp;lt;translateTransform X=&amp;quot;50&amp;quot; Y=&amp;quot;50&amp;quot; x:Name=&amp;quot;TranslateTransform&amp;quot;/&amp;gt;
&amp;lt;/rectangle.RenderTransform&amp;gt;
&amp;lt;/rectangle&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The result of this will look like the following:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://go.microsoft.com/fwlink/?LinkID=149156&#39;&gt;&lt;img alt=&#39;Install Microsoft Silverlight&#39; src=&#39;/wp-content/uploads/sl4wp-ph.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;</description>
                <link>http://username.github.io/2009/09/03/silverlight-multiple-animations-on-one-property-through-transforms</link>
                <guid>http://username.github.io/2009/09/03/silverlight-multiple-animations-on-one-property-through-transforms</guid>
                <pubDate>2009-09-03T12:44:39Z</pubDate>
        </item>

        <item>
                <title>Displaying calendar items in an ItemStyle</title>
                <description>&lt;p&gt;We frequently get the question to display the next &lt;em&gt;x&lt;/em&gt; upcoming events in a rollup webpart. A content query web part is very suitable for this, but you will needa custom ItemStyle. Below you will find the xsl to display events in the following format:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping16.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping17.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The custom itemstyle checks for the difference between all day events, events that span multiple days and checks for start and end times.&lt;/p&gt;

&lt;p&gt;To use this itemstyle you will need to add EventDate and EndDate to the CommonViewFields and reference the ddwrt namespace in the top of your xsl:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
xmlns:ddwrt=&amp;quot;http://schemas.microsoft.com/WebParts/v2/DataView/runtime&amp;quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And finally here’s the itemstyle:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xml
&amp;lt;xsl:template name=&amp;quot;CalendarEvent&amp;quot; match=&amp;quot;Row[@Style=&amp;#39;CalendarEvent&amp;#39;]&amp;quot; mode=&amp;quot;itemstyle&amp;quot;&amp;gt;
     &amp;lt;xsl:variable name=&amp;quot;SafeImageUrl&amp;quot;&amp;gt;
        &amp;lt;xsl:call-template name=&amp;quot;OuterTemplate.GetSafeStaticUrl&amp;quot;&amp;gt;
            &amp;lt;xsl:with-param name=&amp;quot;UrlColumnName&amp;quot; select=&amp;quot;&amp;#39;ImageUrl&amp;#39;&amp;quot;/&amp;gt;
        &amp;lt;/xsl:call-template&amp;gt;
    &amp;lt;/xsl:variable&amp;gt;
    &amp;lt;xsl:variable name=&amp;quot;SafeLinkUrl&amp;quot;&amp;gt;
        &amp;lt;xsl:call-template name=&amp;quot;OuterTemplate.GetSafeLink&amp;quot;&amp;gt;
            &amp;lt;xsl:with-param name=&amp;quot;UrlColumnName&amp;quot; select=&amp;quot;&amp;#39;LinkUrl&amp;#39;&amp;quot;/&amp;gt;
        &amp;lt;/xsl:call-template&amp;gt;
    &amp;lt;/xsl:variable&amp;gt;
    &amp;lt;xsl:variable name=&amp;quot;DisplayTitle&amp;quot;&amp;gt;
        &amp;lt;xsl:call-template name=&amp;quot;OuterTemplate.GetTitle&amp;quot;&amp;gt;
            &amp;lt;xsl:with-param name=&amp;quot;Title&amp;quot; select=&amp;quot;@Title&amp;quot;/&amp;gt;
            &amp;lt;xsl:with-param name=&amp;quot;UrlColumnName&amp;quot; select=&amp;quot;&amp;#39;LinkUrl&amp;#39;&amp;quot;/&amp;gt;
        &amp;lt;/xsl:call-template&amp;gt;
   &amp;lt;/xsl:variable&amp;gt;
      &amp;lt;xsl:variable name=&amp;quot;LinkTarget&amp;quot;&amp;gt;
         &amp;lt;xsl:if test=&amp;quot;@OpenInNewWindow = &amp;#39;True&amp;#39;&amp;quot; &amp;gt;_blank&amp;lt;/xsl:if&amp;gt;
   &amp;lt;/xsl:variable&amp;gt;
   &amp;lt;xsl:variable name=&amp;quot;MultiDayEvent&amp;quot;&amp;gt;
       &amp;lt;xsl:choose&amp;gt;
           &amp;lt;xsl:when test=&amp;quot;starts-with(@EndDate,substring(@EventDate, 0, 11))&amp;quot;&amp;gt;
               0
           &amp;lt;/xsl:when&amp;gt;
           &amp;lt;xsl:otherwise&amp;gt;
               1
           &amp;lt;/xsl:otherwise&amp;gt;
       &amp;lt;/xsl:choose&amp;gt;
   &amp;lt;/xsl:variable&amp;gt;
   &amp;lt;xsl:variable name=&amp;quot;StartTimeIsEndTime&amp;quot;&amp;gt;
       &amp;lt;xsl:choose&amp;gt;
           &amp;lt;xsl:when test=&amp;quot;contains(@EndDate,substring(@EventDate, 11, 9))&amp;quot;&amp;gt;
               1
           &amp;lt;/xsl:when&amp;gt;
           &amp;lt;xsl:otherwise&amp;gt;
               0
           &amp;lt;/xsl:otherwise&amp;gt;
       &amp;lt;/xsl:choose&amp;gt;
   &amp;lt;/xsl:variable&amp;gt;
   &amp;lt;xsl:variable name=&amp;quot;DisplayDate&amp;quot;&amp;gt;
       &amp;lt;xsl:choose&amp;gt;
           &amp;lt;xsl:when test=&amp;quot;$MultiDayEvent = 0&amp;quot;&amp;gt;
               &amp;lt;xsl:choose&amp;gt;
                   &amp;lt;xsl:when test=&amp;quot;@fAllDayEvent = 0&amp;quot;&amp;gt;
                    &amp;lt;xsl:choose&amp;gt;
                           &amp;lt;xsl:when test=&amp;quot;$StartTimeIsEndTime = 1&amp;quot;&amp;gt;
                               &amp;lt;xsl:value-of select=&amp;quot;ddwrt:FormatDateTime(string(@EventDate) ,1043 ,&amp;#39;dd-MM-yyyy H:mm&amp;#39;)&amp;quot; /&amp;gt;
                           &amp;lt;/xsl:when&amp;gt;
                           &amp;lt;xsl:otherwise&amp;gt;
                               &amp;lt;xsl:value-of select=&amp;quot;ddwrt:FormatDateTime(string(@EventDate) ,1043 ,&amp;#39;dd-MM-yyyy H:mm&amp;#39;)&amp;quot; /&amp;gt; - &amp;lt;xsl:value-of select=&amp;quot;ddwrt:FormatDateTime(string(@EndDate) ,1043 ,&amp;#39;H:mm&amp;#39;)&amp;quot; /&amp;gt;
                           &amp;lt;/xsl:otherwise&amp;gt;
                       &amp;lt;/xsl:choose&amp;gt;
                   &amp;lt;/xsl:when&amp;gt;
                   &amp;lt;xsl:otherwise&amp;gt;
                    &amp;lt;xsl:value-of select=&amp;quot;ddwrt:FormatDateTime(string(@EventDate) ,1043 ,&amp;#39;dd-MM-yyyy&amp;#39;)&amp;quot; /&amp;gt;
                &amp;lt;/xsl:otherwise&amp;gt;
               &amp;lt;/xsl:choose&amp;gt;
           &amp;lt;/xsl:when&amp;gt;
           &amp;lt;xsl:otherwise&amp;gt;
               &amp;lt;xsl:choose&amp;gt;
                   &amp;lt;xsl:when test=&amp;quot;@fAllDayEvent = 0&amp;quot;&amp;gt;
                       &amp;lt;xsl:value-of select=&amp;quot;ddwrt:FormatDateTime(string(@EventDate) ,1043 ,&amp;#39;dd-MM-yyyy H:mm&amp;#39;)&amp;quot; /&amp;gt; - &amp;lt;xsl:value-of select=&amp;quot;ddwrt:FormatDateTime(string(@EndDate) ,1043 ,&amp;#39;dd-MM-yyyy H:mm&amp;#39;)&amp;quot; /&amp;gt;
                   &amp;lt;/xsl:when&amp;gt;
                   &amp;lt;xsl:otherwise&amp;gt;
                       &amp;lt;xsl:value-of select=&amp;quot;ddwrt:FormatDateTime(string(@EventDate) ,1043 ,&amp;#39;dd-MM-yyyy&amp;#39;)&amp;quot; /&amp;gt; - &amp;lt;xsl:value-of select=&amp;quot;ddwrt:FormatDateTime(string(@EndDate) ,1043 ,&amp;#39;dd-MM-yyyy&amp;#39;)&amp;quot; /&amp;gt;
                   &amp;lt;/xsl:otherwise&amp;gt;
               &amp;lt;/xsl:choose&amp;gt;
           &amp;lt;/xsl:otherwise&amp;gt;
       &amp;lt;/xsl:choose&amp;gt;
   &amp;lt;/xsl:variable&amp;gt;
   &amp;lt;a href=&amp;quot;{$SafeLinkUrl}&amp;quot; target=&amp;quot;{$LinkTarget}&amp;quot; title=&amp;quot;{@LinkToolTip}&amp;quot;&amp;gt;
        &amp;lt;xsl:value-of select=&amp;quot;$DisplayTitle&amp;quot;/&amp;gt;
    &amp;lt;/a&amp;gt;
    &amp;lt;xsl:text&amp;gt; - &amp;lt;/xsl:text&amp;gt;&amp;lt;xsl:value-of select=&amp;quot;$DisplayDate&amp;quot;/&amp;gt;&amp;lt;br/&amp;gt;
&amp;lt;/xsl:template&amp;gt;
&lt;/code&gt;&lt;/p&gt;</description>
                <link>http://username.github.io/2009/07/29/displaying-calendar-items-in-an-itemstyle</link>
                <guid>http://username.github.io/2009/07/29/displaying-calendar-items-in-an-itemstyle</guid>
                <pubDate>2009-07-29T14:05:21Z</pubDate>
        </item>

        <item>
                <title>What ASP.Net developers should know about jQuery</title>
                <description>&lt;p&gt;Dave Ward has published a very good &lt;a href=&#39;http://visitmix.com/Opinions/What-ASPNET-Developers-Should-Know-About-jQuery&#39;&gt;article&lt;/a&gt; about jQuery for ASP.Net developers on the MIX site. I found the part about unobtrusive JavaScript particularly useful.&lt;/p&gt;

&lt;p&gt;With the recent improvements in ASP.Net for JSON and the ease of jQuery, all ASP.Net developers should embrace JavaScript for creating better user interfaces.&lt;/p&gt;

&lt;p&gt;You can find the article here: &lt;a href=&#39;http://visitmix.com/Opinions/What-ASPNET-Developers-Should-Know-About-jQuery&#39;&gt;http://visitmix.com/Opinions/What-ASPNET-Developers-Should-Know-About-jQuery&lt;/a&gt;&lt;/p&gt;</description>
                <link>http://username.github.io/2009/05/16/what-asp-net-developers-should-know-about-jquery</link>
                <guid>http://username.github.io/2009/05/16/what-asp-net-developers-should-know-about-jquery</guid>
                <pubDate>2009-05-16T19:43:11Z</pubDate>
        </item>

        <item>
                <title>Enhancements to Office client integration with Forms Based Authentication on SharePoint</title>
                <description>&lt;p&gt;Recently Steve Peschka of the SharePoint Team blogged about improvements in Office client integration when you’re using Forms Based Authentication.&lt;/p&gt;

&lt;p&gt;After installing an update for the Office Clients you are now prompted with a login box when you edit an Office document on a SharePoint site that uses FBA:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping18.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping19.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you have a customized login page this will be shown instead, so users won’t be (or will be less) confused when they get a login form with your company’s branding applied.&lt;/p&gt;

&lt;p&gt;Read more about it here: &lt;a href=&#39;http://blogs.msdn.com/sharepoint/archive/2009/05/13/update-on-sharepoint-forms-based-authentication-fba-and-office-client.aspx&#39;&gt;http://blogs.msdn.com/sharepoint/archive/2009/05/13/update-on-sharepoint-forms-based-authentication-fba-and-office-client.aspx&lt;/a&gt;&lt;/p&gt;</description>
                <link>http://username.github.io/2009/05/16/enhancements-to-office-client-integration-with-forms-based-authentication-on-sharepoint</link>
                <guid>http://username.github.io/2009/05/16/enhancements-to-office-client-integration-with-forms-based-authentication-on-sharepoint</guid>
                <pubDate>2009-05-16T19:20:10Z</pubDate>
        </item>

        <item>
                <title>Useful SharePoint classes</title>
                <description>&lt;p&gt;I just found out that the object model includes some very useful classes to speed up your coding efforts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPUtilty&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Contains methods for redirecting users to the error page, access denied page or a custom url. You can get Full name and email adres of a user by passing in the logginname, send an email from the web context or determine if an lcid is an East-Asian lcid.&lt;/p&gt;

&lt;p&gt;More information here: &lt;a href=&#39;http://msdn.microsoft.com/en-us/library/microsoft.sharepoint.utilities.sputility.aspx&#39;&gt;http://msdn.microsoft.com/en-us/library/microsoft.sharepoint.utilities.sputility.aspx&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPBuiltinFieldId&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Contains variables for all the Guids of the built in fields. No need to worry about the difference between dutch and english MOSS sites.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPBuiltInContentTypeId&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Contains variables for all the Guids of the built-in contenttypes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPDiffUtilty&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Shows the differences between two strings in Html format. So comparing “This is an initial string” with “This” returns the following: “&lt;strong&gt;This is an initial string&lt;/strong&gt;“&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPContentTypeId (structure)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Provides methods to determine the relationships between two contenttypes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPContentTypeUsage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Allows you to determine where contenttypes are used within the sitecollection. Here’s a useful post that shows code to audit the contenttype hierarchy: &lt;a href=&#39;http://soerennielsen.wordpress.com/2008/03/06/audit-your-content-type-hierarchy/&#39;&gt;http://soerennielsen.wordpress.com/2008/03/06/audit-your-content-type-hierarchy/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;SPChangeQuery&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Allows you to query your sitecollection for objects that have changed. This way you can audit changes in access rights for instance.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/04/03/useful-sharepoint-classes</link>
                <guid>http://username.github.io/2009/04/03/useful-sharepoint-classes</guid>
                <pubDate>2009-04-03T14:09:18Z</pubDate>
        </item>

        <item>
                <title>Building an AJAX web part with jQuery (Part 3)</title>
                <description>&lt;p&gt;In &lt;a href=&#39;http://blog.petergerritsen.nl/2009/03/30/building-an-ajax-web-part-with-jquery-part-1/&#39;&gt;part 1&lt;/a&gt; of this series I explained a bit about the context and goal of creating an AJAX web part without using ASP.Net AJAX. I also showed the steps necessary for creating services that return data in the JSON format. In &lt;a href=&#39;http://blogs.tamtam.nl/peterg/2009/03/31/BuildingAnAJAXWebPartWithJQueryPart2.aspx&#39;&gt;part 2&lt;/a&gt; I showed you how to call these services from JavaScript and render the HTML for the data. In this last part I’ll show you how to use the jQuery UI and validation plugins.&lt;/p&gt;

&lt;h4 id=&#39;jquery_ui&#39;&gt;jQuery UI&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#39;http://jqueryui.com/home&#39;&gt;jQuery UI&lt;/a&gt; plugin provides some useful widgets and effects to use in your jQuery based scripts. It also offers an advanced theme framework, so you don’t have to write all the css by yourself. You can use one of the included theme’s or roll your own with the &lt;a href=&#39;http://jqueryui.com/themeroller/&#39;&gt;ThemeRoller&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ve decided to use the UI plugin for tree things in my web part:&lt;/p&gt;

&lt;p&gt;* Datepicker widget to specify the orderdate * Dialog widget to show confirmation dialogs, edit forms and validation messages * Highlighting effect to focus the users attention to changing data, such as the shoppingcart&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Datepicker&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The datepicker enhances a standard text input box with a datapicker that slides out when the textbox receives focus. It contains different options for specifying the allowed dates, year/month selection and more. When it’s shown it will look like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping20.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping21.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Linking it to your input box is very simple. I use the following code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
$(&amp;quot;#bpvorderdate&amp;quot;).datepicker({
showOn: &amp;#39;button&amp;#39;,
minDate: +1, dateFormat: &amp;#39;dd/mm/yy&amp;#39;,
buttonImage: &amp;#39;/_layouts/images/calendar.gif&amp;#39;,
buttonImageOnly: true
});
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this case, the user has to press a button (in this case an imagebutton) to open the datepicker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dialogs&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dialogs are a very useful way to give feedback to the user or asking for confirmation. In my web part I want to show a confirmation dialog when a user presses the delete icon next to a product in the shoppingcart or the “clear shoppingcart” button. The user will be presented with the following dialog:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping22.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping23.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Showing this is very easy. First we create a function that is called when the page is initialized:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
function initializeDeleteItemDialog() {
var doOk= function() {
var paramsdata = {
&amp;quot;productId&amp;quot; : $(&amp;quot;#bpvremoveitemid&amp;quot;).val()
}
$.ajax({
type: &amp;quot;POST&amp;quot;, url: &amp;quot;/_layouts/intranet2009/bpvshoppingcart.asmx/DeleteItem&amp;quot;,
data: JSON.stringify(paramsdata),
contentType: &amp;quot;application/json;charset=utf-8&amp;quot;,
dataType: &amp;quot;json&amp;quot;,
success:rendershoppingcart,
error: showError
});
$(&amp;quot;#bpvremoveitemdialog&amp;quot;).dialog(&amp;quot;close&amp;quot;);
}
var doCancel = function()
{
$(&amp;quot;#bpvremoveitemdialog&amp;quot;).dialog(&amp;quot;close&amp;quot;);
}
var dialogOpts = {
modal: true,
buttons: {&amp;quot;Bewaren&amp;quot;: doCancel, &amp;quot;Verwijderen&amp;quot;: doOk},
autoOpen: false
}
$(&amp;quot;#bpvremoveitemdialog&amp;quot;).dialog(dialogOpts);
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We first specify the code to execute when the user presses the Ok button. In this case we’ll call the DeleteItem method of the shoppingcart web service and then close the dialog. The Cancel button will close the dialog straight away. In the dialog options we specify the buttons with their callback. Then we hook up the dialog to the html element we want to show. The html is written out in the Render method of the web part:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
writer.WriteLine(“&amp;lt;div id=\”bpvremoveitemdialog\” title=\”Product verwijderen?\”&amp;gt;”);
writer.WriteLine(“Weet u zeker dat u dit product uit uw winkelwagen wilt verwijderen?”);
writer.WriteLine(“&amp;lt;input type=\”hidden\” id=\”bpvremoveitemid\”/&amp;gt;”);
writer.WriteLine(“&amp;lt;/div&amp;gt;”);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To open the dialog we just have to call the dialog method again with “open” as parameter:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
function removeProduct(element) {
$(&amp;quot;#bpvremoveitemid&amp;quot;).val($(element).attr(&amp;quot;productid&amp;quot;) );
$(&amp;quot;#bpvremoveitemdialog&amp;quot;).dialog(&amp;quot;open&amp;quot;);
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Validation&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Validation of your inputs is supposed to be really easy with the &lt;a href=&#39;http://bassistance.de/jquery-plugins/jquery-plugin-validation/&#39;&gt;validation plugin&lt;/a&gt;. Unfortunately this doesn’t count when you combine it with ASP.Net Webforms. With the validation plugin you attach the validation to a form within your html. Because ASP.Net Webforms uses one form tag for the entire page, this doesn’t allow you to set validation to a group of elements that would normally be contained within their own form tag. The solution I came up with for now only validates 1 element at a time. If you now of a way to assign one validation and remove it again before assigning a new validation, let me know.&lt;/p&gt;

&lt;p&gt;First we hook up all the validations we want on the form and we specify a custom validation rule, called dutchDate:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
$.validator.addMethod(
&amp;quot;dutchDate&amp;quot;, function(value,element)
{ return value.match(/^\d\d?\/\d\d?\/\d\d\d\d$/);},
&amp;quot;Voer een datum in van het formaat dd/mm/yyyy&amp;quot; );
$(&amp;quot;form&amp;quot;).validate({
onsubmit: false,
onfocusout: false,
onkeyup: false,
onclick: false,
showErrors: showValidationError,
rules: {
bpvproductamount: {
required: true,
number: true
},
bpvproductid: {
required: true
},
bpvorderdate: {
required: true,
dutchDate: true
}
},
messages: {
bpvproductamount: {
required: &amp;quot;Aantal is een verplicht veld&amp;quot;,
number: &amp;quot;Aantal moet een getal zijn&amp;quot;
},
bpvproductid: {
required: &amp;quot;U heeft geen product geselecteerd&amp;quot; },
bpvorderdate: {
required: &amp;quot;Bezorg-/ophaaldatum is een verplicht veld&amp;quot;,
dutchDate: &amp;quot;Bezorg-/ophaaldatum moet in het formaat dd/mm/yyyy zijn&amp;quot;
}
}
});
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I only want the validation to occur when I call it on specific elements from code, so we specify false on every event it normally triggers on. When there are errors,  I want to call a showValidationError function that shows the errors in a dialog box. Then we specify the rules and the messages we want to show when the rule isn’t matched. “bpvproductamount” equals the name attribute of the input element.&lt;/p&gt;

&lt;p&gt;To call the validation we use the element method of the validation plugin:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
if ($(&amp;quot;form&amp;quot;).validate().element(&amp;quot;#txtbpvproductid&amp;quot;) &amp;amp;&amp;amp; $(&amp;quot;form&amp;quot;).validate().element(&amp;quot;#txtbpvproductamount&amp;quot;))
{
// valid, so perfom actions
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As soon as an element doesn’t pass validation, the method we attached to the showErrors event is called. Unfortunately this means only one error at a time will popup if multiple  elements don’t pass validation. To show the validation messages, we’ll make use of the Dialog widget once again:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
function showValidationError(errorMap, errorList)
{
var message = &amp;quot;&amp;quot;;
var i;
for(i=0; i &amp;lt; errorList.length; i++) {
message += errorList[i].message + &amp;quot;  
&amp;quot;;
}
if (message.length &amp;gt; 0) {
showMessage(message);
}
}
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#39;conclusion&#39;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;Building an AJAX web part with jQuery (and some plugins) can result in a very responsive UI with a good user experience. In the end, I don’t think building a web part with ASP.Net AJAX would have taken me less time as well. I’m not happy with the validation though. Although the jQuery validation plugin is very useful in most web frameworks (including ASP.Net MVC), it seems that it doesn’t combine well with web forms. But I haven’t been able to find a better plugin for it.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/03/31/building-an-ajax-web-part-with-jquery-part-3</link>
                <guid>http://username.github.io/2009/03/31/building-an-ajax-web-part-with-jquery-part-3</guid>
                <pubDate>2009-03-31T13:36:35Z</pubDate>
        </item>

        <item>
                <title>Building an AJAX web part with jQuery (Part 2)</title>
                <description>&lt;p&gt;In &lt;a href=&#39;http://blog.petergerritsen.nl/2009/03/30/building-an-ajax-web-part-with-jquery-part-1/&#39;&gt;part 1&lt;/a&gt; of this series I explained a bit about the context and goal of creating an AJAX web part without using ASP.Net AJAX. I also showed the steps necessary for creating services that return data in the JSON format. In this post I’ll show you how to call these services from JavaScript and insert the data in the HTML placeholders rendered by the web part.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calling the generic handler for products and categories&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;jQuery offers various methods to perform asynchronous calls to web resources. To retrieve JSON the most used are jQuery.ajax and jQuery.getJSON. The last one uses a HTTP GET request and is simpler to use, the jQuery.ajax method offers more options/flexibility. For retrieving the product categories and the products, I’ve decided to go with getJSON. The code for retreiving the categories looks as follows:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
function showProductCategories() {
$.getJSON(bpvweburl + &amp;quot;/_layouts/intranet2009/bpv.ashx&amp;quot;,
{type: &amp;quot;categories&amp;quot;},
function(data)
{
var categoriescontainer = $(&amp;quot;#bpvcategoriescontainer&amp;quot;);
categoriescontainer.empty();
var list = categoriescontainer.append($(&amp;quot;#bpvcategorytemplate&amp;quot;).html());
var directive = {&amp;#39;a.context[onclick]&amp;#39; : &amp;#39;&amp;quot;showProducts(this);return false;&amp;quot;&amp;#39;};
list.autoRender( data, directive );
});
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The first line is responsible for calling the handler. It specifies a inline callback method to handle the returned data. The JSON returned is processed by the PURE templating plugin. I’ve blogged about using this &lt;a href=&#39;http://blog.petergerritsen.nl/2009/03/13/using-a-template-plugin-for-jquery-to-parse-json-data/&#39;&gt;before&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Calling the shopping cart web service&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For getting the data from the web service, we’ll use the jQuery.ajax method. That’s because we need to do a HTTP POST request as well as specify some other options for the request. For more information see &lt;a href=&#39;http://encosia.com/2008/03/27/using-jquery-to-consume-aspnet-json-web-services/&#39;&gt;this&lt;/a&gt; post by Dave Ward. To initially load the shopping cart we use the following code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
function loadShoppingcart()
{
$.ajax({
type: &amp;quot;POST&amp;quot;,
url: &amp;quot;/_layouts/ecabointranet2009/bpvshoppingcart.asmx/GetItems&amp;quot;,
data: &amp;quot;{}&amp;quot;,
contentType: &amp;quot;application/json; charset=utf-8&amp;quot;,
dataType: &amp;quot;json&amp;quot;,
success: rendershoppingcart,
error: showError
});
}
function rendershoppingcart(msg) {
var cartcontainer = $(&amp;quot;#bpvcartcontent&amp;quot;);
cartcontainer.empty();
if (msg.d.length &amp;gt; 0)
{
var cartitemslist = cartcontainer.append($(&amp;quot;#bpvcarttemplate&amp;quot;).html());
var directives = {
&amp;#39;a.bpvedit[onclick]&amp;#39; : &amp;#39;&amp;quot;editAmount(this); return false;&amp;quot;&amp;#39;,
&amp;#39;a.bpvremove[onclick]&amp;#39; : &amp;#39;&amp;quot;removeProduct(this); return false;&amp;quot;&amp;#39;
}
cartitemslist.autoRender( msg.d, directives );
}
else
{
cartcontainer.append(&amp;quot;U heeft nog geen producten in uw winkelwagen&amp;quot;);
}
$(&amp;quot;#bpvcartcontent&amp;quot;).effect(&amp;quot;highlight&amp;quot;, {color: &amp;quot;#ffcf57&amp;quot;}, 700, null);
}
function showError(xhr, status, error)
{
var err = eval(&amp;quot;(&amp;quot; + xhr.responseText + &amp;quot;)&amp;quot;);
$(&amp;quot;#bpverrordialog span.errormessage&amp;quot;).html(err.Message);
$(&amp;quot;#bpverrordialog&amp;quot;).dialog(&amp;quot;open&amp;quot;);
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As you can see we post to the GetItems method of the asmx. We need to specify a empty JSON object as data (more information on that in &lt;a href=&#39;http://encosia.com/2008/06/05/3-mistakes-to-avoid-when-using-jquery-with-aspnet-ajax/&#39;&gt;this&lt;/a&gt; post, again by Dave Ward) and specify the contentType we want returned. When the AJAX call returns an error, we’ll call the showError method (which uses the jQuery UI dialog widget I’ll tell more about in part 3). When the call is successful, the rendershoppingcart method is called. This checks if the cart is empty, so we can display a message in that case, or uses PURE again for rendering the cart contents. To provide visual feedback to the user when the cart is updated, we’ll use the highlight effect on the cart to attract the attention of the user. If we want to pass in parameters with an AJAX call (like the productId when we want to delete an item from the cart), we need to construct a parameters object and serialize that as string for usage in the call:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
var paramsdata = { &amp;quot;productId&amp;quot; : $(&amp;quot;#bpvremoveitemid&amp;quot;).val() }
$.ajax({
type: &amp;quot;POST&amp;quot;,
url: &amp;quot;/_layouts/ecabointranet2009/bpvshoppingcart.asmx/DeleteItem&amp;quot;,
data: JSON.stringify(paramsdata),
contentType: &amp;quot;application/json; charset=utf-8&amp;quot;,
dataType: &amp;quot;json&amp;quot;,
success: rendershoppingcart,
error: showError
});
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we use a JSON.stringify method for serializing the object as a string.&lt;/p&gt;

&lt;p&gt;You can &lt;a href=&#39;http://www.json.org/json2.js&#39;&gt;download&lt;/a&gt; the scriptfile needed for this from JSON.org.&lt;/p&gt;

&lt;p&gt;All the other methods in the web service are called in the same way, so there’s no need to inundate you with more code on that. The only thing left is to show you parts of the contents of the Render method in the webpart:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
 // Templates
 // Categorylist template
 writer.WriteLine(&amp;quot;&amp;lt;div id=\&amp;quot;bpvcategorytemplate\&amp;quot; style=\&amp;quot;display: none;\&amp;quot;&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;h3&amp;gt;Productcategorie&amp;lt;/h3&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;ul&amp;gt;&amp;lt;li class=\&amp;quot;context\&amp;quot;&amp;gt;&amp;lt;a href=\&amp;quot;#\&amp;quot; class=\&amp;quot;context context@category\&amp;quot;&amp;gt;laden...&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;);
 // Productlist template
 writer.WriteLine(&amp;quot;&amp;lt;div id=\&amp;quot;bpvproducttemplate\&amp;quot; style=\&amp;quot;display: none;\&amp;quot;&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;h3&amp;gt;Product&amp;lt;/h3&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;ul&amp;gt;&amp;lt;li class=\&amp;quot;context\&amp;quot;&amp;gt;&amp;lt;a href=\&amp;quot;#\&amp;quot; class=\&amp;quot;Title ID@productid Description@description Code@productcode AttachmentUrl@imageurl\&amp;quot;&amp;gt;geen items&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;);
 // Shoppingcart template
 writer.WriteLine(&amp;quot;&amp;lt;div id=\&amp;quot;bpvcarttemplate\&amp;quot; style=\&amp;quot;display: none;\&amp;quot;&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;h3&amp;gt;Informatie en bestellen&amp;lt;/h3&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;table&amp;gt;&amp;lt;thead&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td class=\&amp;quot;ProductName\&amp;quot;&amp;gt;Product&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Aantal&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/thead&amp;gt;&amp;lt;tbody class=\&amp;quot;d\&amp;quot;&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;tr class=\&amp;quot;context\&amp;quot;&amp;gt;&amp;lt;td class=\&amp;quot;ProductName\&amp;quot;&amp;gt;naam&amp;lt;/td&amp;gt;&amp;lt;td class=\&amp;quot;Amount\&amp;quot;&amp;gt;aantal&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;a href=\&amp;quot;#\&amp;quot; class=\&amp;quot;bpvedit ProductID@productid Amount@amount\&amp;quot;&amp;gt;&amp;lt;img src=\&amp;quot;/_layouts/images/ecabo/2009/page-edit.gif\&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; &amp;lt;a href=\&amp;quot;#\&amp;quot; class=\&amp;quot;bpvremove ProductID@productid\&amp;quot;&amp;gt;&amp;lt;img src=\&amp;quot;/_layouts/images/ecabo/2009/bin.gif\&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;);
 // Item selector
 writer.WriteLine(&amp;quot;&amp;lt;div id=\&amp;quot;bpvitemselector\&amp;quot;&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;h2&amp;gt;1. Selecteer uw producten&amp;lt;/h2&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;div id=\&amp;quot;selector\&amp;quot;&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;div id=\&amp;quot;bpvcategoriescontainer\&amp;quot;&amp;gt;&amp;lt;h3&amp;gt;Productcategorie&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;div id=\&amp;quot;bpvproductscontainer\&amp;quot;&amp;gt;&amp;lt;h3&amp;gt;Product&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;div id=\&amp;quot;bpvproductinfo\&amp;quot;&amp;gt;&amp;lt;h3&amp;gt;Informatie en bestellen&amp;lt;/h3&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;img src=\&amp;quot;/_layouts/images/blank.gif\&amp;quot; id=\&amp;quot;bpvproductimage\&amp;quot;/&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;span class=\&amp;quot;title\&amp;quot; id=\&amp;quot;bpvproducttitle\&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;span class=\&amp;quot;description\&amp;quot;  id=\&amp;quot;bpvproductdescription\&amp;quot; /&amp;gt;&amp;lt;/span&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;label class=\&amp;quot;amount\&amp;quot;&amp;gt;Aantal:&amp;lt;/label&amp;gt;&amp;lt;input type=\&amp;quot;text\&amp;quot; id=\&amp;quot;txtbpvproductamount\&amp;quot; name=\&amp;quot;bpvproductamount\&amp;quot;/&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;input type=\&amp;quot;hidden\&amp;quot; id=\&amp;quot;txtbpvproductid\&amp;quot; name=\&amp;quot;bpvproductid\&amp;quot;/&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;input type=\&amp;quot;hidden\&amp;quot; id=\&amp;quot;txtbpvproductcode\&amp;quot; /&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;input type=\&amp;quot;button\&amp;quot; id=\&amp;quot;bpvaddproduct\&amp;quot; value=\&amp;quot;Voeg toe\&amp;quot;/&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;);
 // Shoppingcart
 writer.WriteLine(&amp;quot;&amp;lt;div id=\&amp;quot;bpvshoppingcart\&amp;quot;&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;h2&amp;gt;2. Lijst met uw bestelling&amp;lt;/h2&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;div id=\&amp;quot;bpvcartcontent\&amp;quot;&amp;gt;&amp;lt;span&amp;gt;U heeft nog geen producten in uw winkelwagen&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;a id=\&amp;quot;clearcart\&amp;quot; href=\&amp;quot;#\&amp;quot; onclick=\&amp;quot;clearCart(); return false;\&amp;quot;&amp;gt;Alles verwijderen&amp;lt;/a&amp;gt;&amp;quot;);
 writer.WriteLine(&amp;quot;&amp;lt;/div&amp;gt;&amp;quot;);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;As you can see, all we do is write out HTML. First I write out the HTML needed for the databinding of the categories and products (I removed that because it’s the same as the category one). Then some placeholders and form elements are rendered. There’s a little more HTML off course, but you get the point, NO CODE :-)&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#39;http://blog.petergerritsen.nl/2009/03/31/building-an-ajax-web-part-with-jquery-part-3/&#39;&gt;next part&lt;/a&gt; I’ll show you how to use some jQuery plugins to enhance the experience of the user and validation of the input.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/03/31/building-an-ajax-web-part-with-jquery-part-2</link>
                <guid>http://username.github.io/2009/03/31/building-an-ajax-web-part-with-jquery-part-2</guid>
                <pubDate>2009-03-31T10:29:31Z</pubDate>
        </item>

        <item>
                <title>Building an AJAX web part with jQuery (Part 1)</title>
                <description>&lt;p&gt;In this series of posts I will describe how I build a web part full of AJAX functionality using jQuery and some plugins for jQuery.&lt;/p&gt;

&lt;h4 id=&#39;why&#39;&gt;Why?&lt;/h4&gt;

&lt;p&gt;ASP.Net AJAX is quite hard to implement using only code. Besides that, having multiple updatepanels and multiple triggers outside of these updatepanels, can complicate stuff very quickly. So I decided to see how much time I would need to build the required functionality using JavaScript with jQuery.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The web part of choice was one that would allow visitors of the portal to order a bunch of products from different categories. Products are stored in a list and have a choice sitecolumn to specify the category of the item. Products can be selected and added to a shopping cart. After the wanted items are added to the shopping cart, the user can specify some comments, a handling method (Pick-up or deliver) and a delivery-/pickup date and send in the order. The order information is saved in a list, the user gets a confirmation email and the shopping cart is cleared. The resulting web part look like this (sorry for the dutch interface):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping24.png&#39;&gt;&lt;img alt=&#39;image&#39; src=&#39;http://blog.petergerritsen.nl/wp-content/uploads/snipping25.png&#39; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For getting the categories and products we’ll use a generic handler. This offers the possibility of caching and is perfectly suitable for read-only data access. The shopping cart and order functionality will be provided through a ASP.Net Webservice. Both the handler and web service will return JSON data. We’ll need ASP.Net 3.5 for this.&lt;/p&gt;

&lt;p&gt;The web part will only override the render method and write out the needed HTML. So no control instantiation, event handling or other code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Useful links&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dave Ward’s weblog on &lt;a href=&#39;http://encosia.com/&#39;&gt;encosia.com&lt;/a&gt; provides a vital source for information on combining jQuery and ASP.Net. Also &lt;a href=&#39;http://www.west-wind.com/Weblog/&#39;&gt;Rick Strahl&lt;/a&gt; has some useful posts on this subject.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building the products handler&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We’ll start by building the Generic Handler that returns JSON data for categories and products. We’ll differentiate between the two by passing in the type with the query string. I’ve created two classes for data retrieval from the list in SharePoint, one that returns the choices of the categories and one that returns the products based on the category. We’ll then use the DataContractJsonSerializer to generate and return the JSON for this data:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
public void ProcessRequest(HttpContext context)
{
try
{
if (string.IsNullOrEmpty(context.Request[&amp;quot;type&amp;quot;]))
throw new ArgumentException(&amp;quot;type not specified or null&amp;quot;);
string type = context.Request[&amp;quot;type&amp;quot;];
context.Response.Cache.SetExpires(DateTime.Now.AddSeconds(300));
context.Response.Cache.SetCacheability(HttpCacheability.Public);
if (type.Equals(&amp;quot;categories&amp;quot;, StringComparison.InvariantCultureIgnoreCase))
{
StringCollection categories = BPVProductCategory.GetProductCategories();
DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(StringCollection));
ser.WriteObject(context.Response.OutputStream, categories);
}
    if (type.Equals(&amp;quot;products&amp;quot;, StringComparison.InvariantCultureIgnoreCase))
    {
        if (string.IsNullOrEmpty(context.Request[&amp;quot;category&amp;quot;]))
        throw new ArgumentException(&amp;quot;category not specified or null&amp;quot;);
        string category = HttpUtility.UrlDecode(context.Request[&amp;quot;category&amp;quot;]);
        Ecabo.Intranet2009.SharePoint.Diagnostics.Logging.LogMessageFormat(&amp;quot;Category: {0}&amp;quot;, category);
        List products = BPVProduct.GetAvailableProducts(category);
        DataContractJsonSerializer ser = new DataContractJsonSerializer(typeof(List));
        ser.WriteObject(context.Response.OutputStream, products);
    }
}
catch (Exception ex)
{
    context.Response.Write(string.Format(&amp;quot;ERROR: {0}&amp;quot;, ex.Message));
}
}
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&#39;building_the_shopping_cart_web_service&#39;&gt;Building the shopping cart web service&lt;/h4&gt;

&lt;p&gt;Next, we need to create a web service that will allows us to modify the shopping cart with add, remove, change and clear methods. This web service will also contain a method to place the order. To make sure this web service will return JSON when requested, we’ll decorate the class with the ScriptService attribute (normally you just have to comment out the automatically included line in the class definition) and we decorate the methods with the ScriptMethod attribute in which we specify the ResponseFormat to be JSON. To store the shoppingcart between requests to the service we’ll use the Session. In order for that to work we add the EnableSession=true parameter to the WebMethod attribute of each method. The resulting code looks like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
[WebService(Namespace = &amp;quot;http://sharepoint.ecabo.nl/200903/&amp;quot;)]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
[System.ComponentModel.ToolboxItem(false)]
// To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line.
[System.Web.Script.Services.ScriptService]
public class BPVShoppingCart : System.Web.Services.WebService
{
private List ShoppingCart
{
get
{
if (HttpContext.Current.Session[&amp;quot;BPVShoppingCart&amp;quot;] != null)
{
return (List)HttpContext.Current.Session[&amp;quot;BPVShoppingCart&amp;quot;];
}
else
{
List shoppingCart = new List();
HttpContext.Current.Session.Add(&amp;quot;BPVShoppingCart&amp;quot;, shoppingCart);
return shoppingCart;
}
}
set
{
HttpContext.Current.Session[&amp;quot;BPVShoppingCart&amp;quot;] = value;
}
}
[WebMethod(EnableSession = true)]
[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
public List GetItems()
{
try
{
return ShoppingCart;
}
catch (Exception ex)
{
Ecabo.Intranet2009.SharePoint.Diagnostics.Logging.LogException(ex);
return null;
}
}
[WebMethod(EnableSession = true)]
[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
public List AddItem(string productName, int productId, string productCode, int amount)
{
try
{
ShoppingCartItem item = ShoppingCart.Find(p =&amp;gt; p.ProductID == productId);
if (item == null)
{
item = new ShoppingCartItem();
item.Amount = amount;
item.ProductCode = productCode;
item.ProductID = productId;
item.ProductName = productName;
ShoppingCart.Add(item);
}
else
{
item.Amount += amount;
}
return ShoppingCart;
}
catch (Exception ex)
{
Ecabo.Intranet2009.SharePoint.Diagnostics.Logging.LogException(ex);
return null;
}
}
[WebMethod(EnableSession = true)]
[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
public List DeleteItem(int productId)
{
try
{
ShoppingCartItem item = ShoppingCart.Find(p =&amp;gt; p.ProductID == productId);
if (item != null)
{
ShoppingCart.Remove(item);
}
return ShoppingCart;
}
catch (Exception ex)
{
Ecabo.Intranet2009.SharePoint.Diagnostics.Logging.LogException(ex);
return null;
}
}
[WebMethod(EnableSession = true)]
[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
public List ChangeAmount(int productId, int amount)
{
try
{
if (amount == 0)
return DeleteItem(productId);
ShoppingCartItem item = ShoppingCart.Find(p =&amp;gt; p.ProductID == productId);
if (item != null)
{
item.Amount = amount;
}
return ShoppingCart;
}
catch (Exception ex)
{
Ecabo.Intranet2009.SharePoint.Diagnostics.Logging.LogException(ex);
return null;
}
}
[WebMethod(EnableSession = true)]
[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
public List ClearCart()
{
try
{
ShoppingCart.Clear();
return ShoppingCart;
}
catch (Exception ex)
{
Ecabo.Intranet2009.SharePoint.Diagnostics.Logging.LogException(ex);
return null;
}
}
[WebMethod(EnableSession = true)]
[ScriptMethod(ResponseFormat = ResponseFormat.Json)]
public List PlaceOrder(string comments, string deliveryType, string deliveryDate)
{
try
{
string products = &amp;quot;&amp;quot;;
foreach (ShoppingCartItem item in ShoppingCart)
{
products += string.Format(&amp;quot;{0} - {1} - {2}\r\n&amp;quot;, item.ProductCode, item.Amount, item.ProductName);
}
BPVBestelling bestelling = new BPVBestelling();
bestelling.Comments = comments;
bestelling.Handling = deliveryType;
bestelling.HandlingDate = Convert.ToDateTime(deliveryDate, new CultureInfo(&amp;quot;nl-NL&amp;quot;));
bestelling.Title = DateTime.Now.ToString(&amp;quot;yyyyMMdd_HHmm&amp;quot;) + &amp;quot;_&amp;quot; + SPContext.Current.Web.CurrentUser.Email;
bestelling.Products = products;
bestelling.PlacedBy = SPContext.Current.Web.CurrentUser;
if (BPVBestelling.AddBestelling(bestelling))
{
BPVBestelling.SendConfirmationEmail(bestelling, ShoppingCart);
ShoppingCart.Clear();
return ShoppingCart;
}
else
throw new Exception(&amp;quot;Het is niet mogelijk om uw bestelling te verwerken&amp;quot;);
}
catch (Exception ex)
{
Ecabo.Intranet2009.SharePoint.Diagnostics.Logging.LogException(ex);
throw new Exception(&amp;quot;Het is niet mogelijk om uw bestelling te verwerken&amp;quot;, ex);
}
}
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;There’s one more thing needed for letting the web service return the data in JSON format. We need to include a httpHandler in the web.config for the asmx extension that routes the request to the ScriptHandlerFactory. An easy way to do this is for your SharePoint webapp by creating a blank web.config and placing it in a subfolder of the layouts directory where you also place the asmx file. The following is all you need in that web.config file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xml
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;
&amp;lt;configuration&amp;gt;
&amp;lt;system.web&amp;gt;
&amp;lt;httpHandlers&amp;gt;
&amp;lt;add verb=&amp;quot;*&amp;quot; path=&amp;quot;*.asmx&amp;quot; validate=&amp;quot;false&amp;quot; type=&amp;quot;System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35&amp;quot;/&amp;gt;
&amp;lt;/httpHandlers&amp;gt;
&amp;lt;compilation debug=&amp;quot;true&amp;quot;/&amp;gt;&amp;lt;/system.web&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Next parts&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;That wraps it up for this first post in the series. In &lt;a href=&#39;http://blog.petergerritsen.nl/2009/03/31/building-an-ajax-web-part-with-jquery-part-2/&#39;&gt;part 2&lt;/a&gt; I’ll show you how to call these services from jQuery and insert the data in the HTML of the webpart. In &lt;a href=&#39;http://blog.petergerritsen.nl/2009/05/16/what-asp-net-developers-should-know-about-jquery/&#39;&gt;part 3&lt;/a&gt; we’ll enhance the experience by including dialogs and validation in the solution.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/03/30/building-an-ajax-web-part-with-jquery-part-1</link>
                <guid>http://username.github.io/2009/03/30/building-an-ajax-web-part-with-jquery-part-1</guid>
                <pubDate>2009-03-30T10:08:51Z</pubDate>
        </item>

        <item>
                <title>jQuery performance optimization tips</title>
                <description>&lt;p&gt;Sometimes all the cool effects and functionality you’ve build on top of jQuery turn out to be a bit sluggish. Here are a few tips to optimize performance.&lt;/p&gt;

&lt;p&gt;1) Use jQuery 1.3+. This one utilizes the new Sizzle selector engine which is much faster then the selector engine in the jQuery versions before that.&lt;/p&gt;

&lt;p&gt;2) Make your selectors as specific as possible. Sizzle is build to fail as soon as possible. Using id’s as part of your selector statement can provide quick performance gains. Also specifying a scope for your selector can be beneficial as jQuery only iterates over the elements within the scope.&lt;/p&gt;

&lt;p&gt;3) Reuse selectors and use chaining. Storing the result of a selector in an object variable makes reuse easy. Chaining allows you to perform multiple actions on the already selected DOM elements.&lt;/p&gt;

&lt;p&gt;4) Don’t use class-only selectors. $(“.active”) iterates over all DOM elements. So use a tag name to narrow the search down, $(“li.active”).&lt;/p&gt;

&lt;p&gt;5) Use the &lt;a href=&#39;http://ejohn.org/blog/deep-profiling-jquery-apps/&#39;&gt;profiler plugin&lt;/a&gt; by John Resig to profile your jQuery calls.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/03/24/jquery-performance-optimization-tips</link>
                <guid>http://username.github.io/2009/03/24/jquery-performance-optimization-tips</guid>
                <pubDate>2009-03-24T10:01:32Z</pubDate>
        </item>

        <item>
                <title>Using a template plugin for jQuery to parse JSON data</title>
                <description>&lt;p&gt;When you’re building an AJAX control in .Net there a a few possibilities. One of them is using AJAX.Net updatepanels. This saves you from writing tedious javascript code to refresh parts of you page. With the arrival of javascript libraries such as jQuery it’s much easier to create the AJAX functionality you want with javascript. However, you still have to write quite a lot of DOM manipulation code and use string concatenation to process any JSON results and render the correct HTML.&lt;/p&gt;

&lt;p&gt;Fortunately some javascript template engines are developed to make this easier. These engines come in all shapes and sizes, ranging from engines with an own templating syntax to simple data binding engines.&lt;/p&gt;

&lt;p&gt;On the first side of the spectrum, there are engines such as &lt;a href=&#39;http://jtemplates.tpython.com/&#39;&gt;jTemplates&lt;/a&gt;, this one uses python like syntax to create the instructions. On the other end engines like &lt;a href=&#39;http://wiki.github.com/raid-ox/chain.js&#39;&gt;Chain.js&lt;/a&gt; and &lt;a href=&#39;http://beebole.com/pure/&#39;&gt;PURE&lt;/a&gt; live, these can be considered more a databinding egines. The last ones make use of classnames for the databinding, like in the following Chain.js example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;html
&amp;lt;div id=&amp;quot;quickdemo&amp;quot;&amp;gt;
	&amp;lt;div class=&amp;quot;item&amp;quot;&amp;gt;
		&amp;lt;span class=&amp;quot;library&amp;quot;&amp;gt;Library Name&amp;lt;/span&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt; &lt;code&gt;javascript
$(&amp;#39;#quickdemo&amp;#39;).items( [
		{library:&amp;#39;Prototype&amp;#39;},
		{library:&amp;#39;jQuery&amp;#39;},
		{library:&amp;#39;Dojo&amp;#39;},
		{library:&amp;#39;MooTools&amp;#39;}
	]).chain();
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this case the library field in the JSON objects is put into the element with “library” in de classname. The nice thing about Chain.js is the fact that it monitors the items collection for changes. Adding or removing items from script, automatically updates the generated HTML. So filtering and sorting can be very easily accomplished, some very easy to follow examples are available on the companion website.&lt;/p&gt;

&lt;p&gt;PURE uses the same classnames based system for the databinding. Consider the following example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;html
&amp;lt;ol class=&amp;quot;siteList reference@id&amp;quot;&amp;gt;
	&amp;lt;li class=&amp;quot;sites&amp;quot;&amp;gt;
		&amp;lt;a class=&amp;quot;name url@href&amp;quot; href=&amp;quot;http://beebole.com&amp;quot;&amp;gt;Beebole&amp;lt;/a&amp;gt;
	&amp;lt;/li&amp;gt;
&amp;lt;/ol&amp;gt;
&lt;/code&gt; &lt;code&gt;javascript
var data = {
	&amp;quot;reference&amp;quot;: &amp;quot;3456&amp;quot;,
	&amp;quot;sites&amp;quot;: [{
			&amp;quot;name&amp;quot;: &amp;quot;Beebole&amp;quot;,
			&amp;quot;url&amp;quot;: &amp;quot;http://beebole.com&amp;quot;
		},
		{
			&amp;quot;name&amp;quot;: &amp;quot;BeeLit&amp;quot;,
			&amp;quot;url&amp;quot;: &amp;quot;http://beeLit.com&amp;quot;
		},
		{
			&amp;quot;name&amp;quot;: &amp;quot;PURE&amp;quot;,
			&amp;quot;url&amp;quot;: http://beebole.com/pure
		}]
	};
$(&amp;#39;ol.siteList&amp;#39;).autoRender(data);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;url@href&lt;/em&gt; and &lt;em&gt;reference@id&lt;/em&gt; classnames provide a way to set attributes of the databound elements.&lt;/p&gt;

&lt;p&gt;But what if you don’t want to decorate your HTML elements with extra classnames to support the databinding? Or you want to handle some events of the generated elements?&lt;/p&gt;

&lt;p&gt;For this PURE supports directives. You create your directives and pass them into the autoRender or render functions. Consider the following example:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;html
&amp;lt;div style=&amp;quot;display: none;&amp;quot; id=&amp;quot;bpvcategorytemplate&amp;quot;&amp;gt;
	&amp;lt;ul&amp;gt;
		&amp;lt;li class=&amp;quot;context&amp;quot;&amp;gt;
			&amp;lt;a category=&amp;quot;&amp;quot; class=&amp;quot;context context@category&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;laden...&amp;lt;/a&amp;gt;
		&amp;lt;/li&amp;gt;
	&amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt; &lt;code&gt;javascript
function showProductCategories()
{
    $.getJSON(bpvweburl + &amp;quot;/_layouts/ecabointranet2009/bpv.ashx&amp;quot;, {type: &amp;quot;categories&amp;quot;}, function(data)
    {
        var categoriescontainer = $(&amp;quot;#bpvcategoriescontainer&amp;quot;);
        categoriescontainer.empty();
        var list = categoriescontainer.append($(&amp;quot;#bpvcategorytemplate&amp;quot;).html());
        var directive = {&amp;#39;a.context[onclick]&amp;#39; : &amp;#39;&amp;quot;showProducts(this); return false;&amp;quot;&amp;#39;}
        list.autoRender( data, directive );
    });
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here we get some JSON from a handler, put the html from the template into a new element, and bind the JSON to that template. When binding the JSON data, we attach a javascript function to the onclick event of the generated anchor tags.&lt;/p&gt;

&lt;p&gt;Much more can be accomplished by using directives, such as creating an alternating row style by setting a class during the binding of the items. For more information about using directives in PURE, read &lt;a href=&#39;http://wiki.github.com/pure/pure/what-is-a-directive&#39;&gt;this&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;There are loads more things possible in PURE or in the other engines, the best way to find out is to read the docs and try some things out.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/03/13/using-a-template-plugin-for-jquery-to-parse-json-data</link>
                <guid>http://username.github.io/2009/03/13/using-a-template-plugin-for-jquery-to-parse-json-data</guid>
                <pubDate>2009-03-13T11:47:50Z</pubDate>
        </item>

        <item>
                <title>MOSS Search and browser languages</title>
                <description>&lt;p&gt;We had a very strange issue with some search functionality we developed for a portal. We created an option to search for documents in a library by specifying the path to a specific folder.&lt;/p&gt;

&lt;p&gt;This is done by specifying a keyword query like &lt;em&gt;9:”folder/subfolder”&lt;/em&gt;. In this case the searchproperty &lt;em&gt;9&lt;/em&gt; contains the path of the item.&lt;/p&gt;

&lt;p&gt;While this worked well on our development environments and most of the browsers we tested on, a some browsers it failed. My colleague Arthur discovered it had something to do with the language setting of the browser. When we used Dutch (nl-NL) as preferred language the standard core search results web part didn’t return any items when using a query with a “/” in the conditions.&lt;/p&gt;

&lt;p&gt;If you execute a KeyWordQuery or FullTextSqlQuery in your own code you have the possibility to specify a culture to use in the search. Unfortunately the core search results web part doesn’t provide you with an option to do this easily. In the end I came up with a “hack” to make this work. Just change the preferred languages the browser sends with each request in the OnInit of a webpart that inherits from the standards core results web part like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
protected override void OnInit(EventArgs e)
{
	if (!string.IsNullOrEmpty(CultureOverrideTo))
	{
		if (this.Page.Request.UserLanguages.Length &amp;gt; 0)
			this.Page.Request.UserLanguages[0] = “en-US”;
	}
	base.OnInit(e);
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Note: Because this modifies the current request this can have some consequences on other web parts on your page. So use it with care.&lt;/p&gt;

&lt;p&gt;UPDATE:&lt;/p&gt;

&lt;p&gt;This same behavior can also occur in custom search code. To fix this, simply specify the Culture of your KeyWordQuery or FullTextSqlQuery.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/02/26/moss-search-and-browser-languages</link>
                <guid>http://username.github.io/2009/02/26/moss-search-and-browser-languages</guid>
                <pubDate>2009-02-26T21:03:01Z</pubDate>
        </item>

        <item>
                <title>Creating a 3D tagcloud in Silverlight (part 2)</title>
                <description>&lt;p&gt;In &lt;a href=&#39;http://blog.petergerritsen.nl/2009/02/14/creating-a-3d-tagcloud-in-silverlight-part-1/&#39;&gt;part 1&lt;/a&gt; I showed you how to create the basics for a 3D tagcloud in Silverlight. In this part I’ll show how to get the tags from your html for inserting it into a blog template, we’ll change the color of the tag based on the weight of the tag and let the hyperlink button actually function as a hyperlink (until now it does nothing when you click on it).&lt;/p&gt;

&lt;p&gt;There are a few different ways you can pass or get information from the page the Silverlight control is hosted in:&lt;/p&gt;

&lt;p&gt;* Set the initParams parameter in the Silverlight object definition * Read the HtmlDocument in your Silverlight code * Use JavaScript to call methods in your Silverlight code&lt;/p&gt;

&lt;p&gt;You can only use the first option if your hosting your Silverlight application on the same domain. When using the hosting service on silverlight.live.com, no interaction between your application and HTML page is allowed.&lt;/p&gt;

&lt;p&gt;For the second option you can use the HtmlPage object in your code to traverse through the HTML DOM, basic methods such as GetElementById are available.&lt;/p&gt;

&lt;p&gt;The last option is the one I’ll be using in this post. To accomplish this you need to follow a few steps:&lt;/p&gt;

&lt;p&gt;* Decorate your page class with a &amp;#8220;ScriptableType” attribute * Decorate the method you want to call with the “ScriptableMember” attribute and make sure it’s public * Register your object in the HtmlPage * Give your Silverlight object definition an id, so you can easily reference it from your JavaScript&lt;/p&gt;

&lt;p&gt;The reason I’m going with this technique is the flexibility it provides when you want to reuse the tagcloud in other applications. Every blog engine has a different way to generate the HTML for a tagcloud, my blog just shows a list of tags.&lt;/p&gt;

&lt;p&gt;To change the color based on the weight and set the url of the HyperlinkNutton we need to make some changes to the Tag3D object I showed you in the last post:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
public class Tag3D
{
    public HyperlinkButton btnLink { get; set; }
    private TextBlock textBlock { get; set; }
    public Point3D centerPoint { get; set; }
    private Color TagColor { get; set; }
    public Tag3D(double x, double y, double z, string text, string url, Color tagColor, int weight)
    {
        centerPoint = new Point3D(x, y, z);
        textBlock = new TextBlock();
        textBlock.Text = string.Format(&amp;quot;{0} ({1})&amp;quot;, text, weight);
        btnLink = new HyperlinkButton();
        btnLink.Content = textBlock;
        btnLink.NavigateUri = new Uri(url);
        this.TagColor = tagColor;
    }
    public void Redraw(double xOffset, double yOffset)
    {
        double zFactor = ((centerPoint.Z + 300) / 450.0);
        btnLink.FontSize = 30.0 * zFactor;
        double alpha = zFactor * 255;
        //Debug.WriteLine(&amp;quot;Z: {0}; zFactor: {1}; alpha: {2}&amp;quot;, centerPoint.Z, zFactor, alpha);
        btnLink.Foreground = new SolidColorBrush(Color.FromArgb(Convert.ToByte(alpha), TagColor.R, TagColor.G, TagColor.B));
        Canvas.SetLeft(btnLink, centerPoint.X + xOffset - (btnLink.ActualWidth / 2));
        Canvas.SetTop(btnLink, -centerPoint.Y + yOffset - (btnLink.ActualHeight/ 2));
        Canvas.SetZIndex(btnLink, Convert.ToInt32(centerPoint.Z));
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In the constructor we now pass in the url and a Color to show when the tag is the most important (I chose to use a scale of 1 to 10, with 10 being the most important). The url is simply assigned to the NavigateUrl property of the HyperlinkButton. The Color is used when setting the new Foreground Brush. I also made some modifications in the calculations of the font size and alpha of the Brush to make it look a bit more realistic. To let the JavaScript in the page add the tags I’ve created a AddTag method and decorated it with the ScriptableMember attribute:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
[ScriptableMember()]
public void AddTag(string tag, string url, int weight)
{
    if (weight &amp;gt; 10)
    weight = 10;
    Color color = new Color();
    color.R = Convert.ToByte(Math.Round(209.0 * ( weight / 10.0)));
    color.G = Convert.ToByte(Math.Round(18.0 * (weight / 10.0)));
    color.B = Convert.ToByte(Math.Round(65.0 * (weight / 10.0)));
    tagBlocks.Add(new Tag3D(0.0, 0.0, 0.0, tag, url, color));
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In this method we calculate the Color of the tag based on the weight. Then we add a new tag to the tagBlocks list.&lt;/p&gt;

&lt;p&gt;After calling this method a couple of times we need to place the tags and display them. I’ve changed the FillTags method shown in the previous post and renamed it to ProcessTags to make the name a bit more meaningful:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
[ScriptableMember()]
public void ProcessTags()
{
    double radius = RootCanvas.Width / 3;
    int max = tagBlocks.Count;
    double phi = 0;
    double theta = 0;
    for (int i = 1; i &amp;lt; max + 1; i++)
    {
        phi = Math.Acos(-1.0 + (2.0 * i – 1.0) / max);
        theta = Math.Sqrt(max * Math.PI) * phi;
        double x = radius * Math.Cos(theta) * Math.Sin(phi);
        double y = radius * Math.Sin(theta) * Math.Sin(phi);
        double z = radius * Math.Cos(phi);
        Tag3D tag = tagBlocks[i -1];
        tag.centerPoint = new Point3D(x, y, z);
        tag.Redraw(RootCanvas.Width / 2, RootCanvas.Height / 2);
        RootCanvas.Children.Add(tag.btnLink);
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We need one more thing to make the methods callable from JavaScript. Register the object with the HtmlPage in the constructor:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
HtmlPage.RegisterScriptableObject(&amp;quot;TagCloud&amp;quot;, this);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;No you can call the methods from JavaScript:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
function addTags() {
    var control = document.getElementById(&amp;quot;Xaml1&amp;quot;);
    control.content.TagCloud.AddTag(&amp;quot;Silverlight&amp;quot;, &amp;quot;http://silverlight.net&amp;quot;, 5);
    control.content.TagCloud.AddTag(&amp;quot;Tagcloud&amp;quot;, &amp;quot;http://blogs.tamtam.nl&amp;quot;, 2);
    control.content.TagCloud.AddTag(&amp;quot;Tam Tam&amp;quot;, &amp;quot;http://www.tamtam.nl&amp;quot;, 10);
    control.content.TagCloud.AddTag(&amp;quot;Axelerate3D&amp;quot;, &amp;quot;http://www.codeplex.com&amp;quot;, 8);
    control.content.TagCloud.AddTag(&amp;quot;WPF&amp;quot;, &amp;quot;http://www.microsoft.com&amp;quot;, 1);
    control.content.TagCloud.AddTag(&amp;quot;SharePoint&amp;quot;, &amp;quot;http://www.microsoft.com&amp;quot;, 4);
    control.content.TagCloud.ProcessTags();
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I’m just attaching some code to the onclick of a button and hard-coding the tags. Normally you would handle the onload of the document (or better yet the $(document).ready in jQuery) and get your tags from the Html to pass them to the Silverlight object.&lt;/p&gt;

&lt;p&gt;And that wraps it up for this tutorial.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/02/19/creating-a-3d-tagcloud-in-silverlight-part-2</link>
                <guid>http://username.github.io/2009/02/19/creating-a-3d-tagcloud-in-silverlight-part-2</guid>
                <pubDate>2009-02-19T09:49:04Z</pubDate>
        </item>

        <item>
                <title>Adding AJAX.Net to your MOSS WebParts</title>
                <description>&lt;p&gt;I know there are loads of posts on this subject already, but in this one I’ll try to give some useful tips on this subject.&lt;/p&gt;

&lt;p&gt;First, you need to add AJAX.Net entries to your web.config of the MOSS site. A very easy way to do this is by using the &lt;a href=&#39;http://www.codeplex.com/ajaxifymoss&#39;&gt;Ajaxify&lt;/a&gt; &lt;a href=&#39;http://www.codeplex.com/ajaxifymoss&#39;&gt;stsadm extensions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Simply add the included wsp to your solutions and deploy. After that you can easily add the entries by running the &lt;em&gt;stsadm –addajaxmoss&lt;/em&gt; command. Unfortunately you need to add one entry manually, but that is given as part of the output when you run the command.&lt;/p&gt;

&lt;p&gt;Next you need to add a ScriptManager to the pages with the AJAX enabled webparts. You can off course modify the masterpage. I chose to create a base web part that checks if a ScriptManager has been added to the page and adds it if necessary:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
protected override void OnInit(EventArgs e)
{
    base.OnInit(e);
    //Register the ScriptManager
    ScriptManager scriptManager = ScriptManager.GetCurrent(this.Page);
    if (scriptManager == null)
    {
        scriptManager = new ScriptManager();
        scriptManager.ID = “ScriptManager1″;
        scriptManager.EnablePartialRendering = true;
        this.Page.Form.Controls.AddAt(0, scriptManager);
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Because MOSS needs a lot of JavaScript to function properly, this unfortunately requires another fix. You can read more about it &lt;a href=&#39;http://msdn.microsoft.com/en-us/library/bb861877.aspx&#39;&gt;here&lt;/a&gt;. I added the fix to the base webpart with the following code:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
protected override void CreateChildControls()
{
    //Add fix according to http://msdn2.microsoft.com/en-us/library/bb861877.aspx
    EnsurePanelFix();
}
private void EnsurePanelFix()
{
    if (this.Page.Form!= null)
    {
        String fixupScript = @”
        _spBodyOnLoadFunctionNames.push(“”_initFormActionAjax”&amp;quot;);
        function _initFormActionAjax()
        {
            if (_spEscapedFormAction == document.forms[0].action)
            {
                document.forms[0]._initialAction = document.forms[0].action;
            }
        }
        var RestoreToOriginalFormActionCore = RestoreToOriginalFormAction;
        RestoreToOriginalFormAction = function()
        {
            if (_spOriginalFormAction != null)
            {
                RestoreToOriginalFormActionCore();
                document.forms[0]._initialAction = document.forms[0].action;
            }
        }”;
        ScriptManager.RegisterStartupScript(this, typeof(BaseWebPart), “UpdatePanelFixup”, fixupScript, true);
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Because all the content you want to include in an UpdatePanel needs to be added to the ControlTemplateContainer.Controls collection, it’s not possible to write out any html you need between controls in the UpdatePanel by using the standard HtmlTextWriter.WriteLine method in the Render method. The easiest way is to add LiteralControls to the controlcollection of the UpdatePanel (with thanks to my collegue Wouter Lemaire for giving me the tip). To make this even easier, I’ve added the following extension method to my project:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
public static void AddLiteral(this UpdatePanel updatePanel, string html)
{
    Literal lit = new Literal();
    lit.Text = html + “\r\n”;
    updatePanel.ContentTemplateContainer.Controls.Add(lit);
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You can call this method from the CreateChildControls method in your web part like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
updatePanel.AddLiteral(“&amp;lt;table&amp;gt;&amp;lt;tr&amp;gt;”);
updatePanel.AddLiteral(“&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Ma&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Di&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Wo&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Do&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;Vr&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;”);
updatePanel.AddLiteral(“&amp;lt;td&amp;gt;Ochtend&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;”);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To indicate progress you need some form of visual feedback to the user. For this you need to set the ProgressTemplate of the UpdatePanel. For this you need to create a class that implements the ITemplate interface.&lt;/p&gt;

&lt;p&gt;Then you implement the InstantiateIn method to create a template:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
public void ITemplate.InstantiateIn(Control container)
{
    Label lbl = new Label();
    lbl.Text = “Progress….”;
    container.Controls.Add(lbl);
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then add an object of this class to the ProgressTemplate property of the UpdatePanel:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
updateProgress.ProgressTemplate = new ProgressTemplate();
&lt;/code&gt;&lt;/p&gt;</description>
                <link>http://username.github.io/2009/02/18/adding-ajax-net-to-your-moss-webparts</link>
                <guid>http://username.github.io/2009/02/18/adding-ajax-net-to-your-moss-webparts</guid>
                <pubDate>2009-02-18T12:53:37Z</pubDate>
        </item>

        <item>
                <title>Creating a 3D tagcloud in Silverlight (part 1)</title>
                <description>&lt;p&gt;When I saw the &lt;a href=&#39;http://www.roytanck.com/2008/03/15/wp-cumulus-released/&#39;&gt;wp-cumulus plugin by Roy Tanck&lt;/a&gt;, I thought it would be a great idea to implement the same sort of functionality in Silverlight. It’s hardly original but allows me to learn some parts of the Silverlight framework.&lt;/p&gt;

&lt;p&gt;The components behind it are quite simple:&lt;/p&gt;

&lt;p&gt;* Get (or send) the tags from your HTML page to the Silverlight usercontrol * Render the tags so it looks 3D * Create a method to rotate the tags based on the position of your mouse&lt;/p&gt;

&lt;h4 id=&#39;choosing_a_3d_library&#39;&gt;Choosing a 3D library&lt;/h4&gt;

&lt;p&gt;The current version of Silverlight doesn’t include 3D functionality like WPF does through the &lt;a href=&#39;http://msdn.microsoft.com/en-us/library/system.windows.media.media3d.aspx&#39;&gt;Media3D namespace&lt;/a&gt;. Fortunately some developers implemented the same functionality in libraries for Silverlight. The main options I found were Kit3D and Axelerate3D. I decided to use the last one because that one mimics the RotateTransform3D class in WPF 3D the best (it contains a TryTransform method).&lt;/p&gt;

&lt;h4 id=&#39;rendering_the_tags&#39;&gt;Rendering the tags&lt;/h4&gt;

&lt;p&gt;I decided to tackle the second item first, because if I wasn’t able to manage this, the other items wouldn’t be very useful.&lt;/p&gt;

&lt;p&gt;To create a tag in 3D you need some basic functionality:&lt;/p&gt;

&lt;p&gt;* A way to store it’s x, y and z coordinates * A hyperlinkbutton to redirect to a page that shows all the items with that tag * A textblock to display the tag&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
public class Tag3D
{
    public Tag3D(double x, double y, double z, string text)
    {
        centerPoint = new Point3D(x, y, z);
        textBlock = new TextBlock();
        textBlock.Text = text;
        btnLink = new HyperlinkButton();
        btnLink.Content = textBlock;
    }
    public HyperlinkButton btnLink { get; set; }
    public TextBlock textBlock { get; set; }
    public Point3D centerPoint { get; set; }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then we need a way to make it look like it’s rendered in 3D. We do that by changing the fontsize and the opacity of the text. For that I created a method Redraw:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
public void Redraw(double xOffset, double yOffset)
{
    double posZ = centerPoint.Z + 200;
    btnLink.FontSize = 10 * (posZ / 100);
    double alpha = centerPoint.Z + 200;
    if (alpha &amp;gt; 255)
    alpha = 255;
    if (alpha &amp;lt; 0)
    alpha = 0;
    btnLink.Foreground = new SolidColorBrush(Color.FromArgb(Convert.ToByte(alpha), 0, 0, ));
    Canvas.SetLeft(btnLink, centerPoint.X + xOffset – (btnLink.ActualWidth / 2));
    Canvas.SetTop(btnLink, -centerPoint.Y + yOffset – (btnLink.ActualHeight/ 2));
    Canvas.SetZIndex(btnLink, Convert.ToInt32(centerPoint.Z));
}
&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&#39;placing_the_tags&#39;&gt;Placing the tags&lt;/h5&gt;

&lt;p&gt;To distribute the tags evenly over the sphere, we need some math. Luckily someone was way ahead of me and posted a useful &lt;a href=&#39;http://blog.massivecube.com/?p=9.&#39;&gt;blogentry&lt;/a&gt; on this subject (this technique is also used in the wp-cumulus plugin).&lt;/p&gt;

&lt;p&gt;The following method creates and places the tags in the canvas:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
private void FillTags()
{
    tagBlocks = new List();
    string[] tags = new string[] { “Silverlight”,
    “WPF”,
    “3D”,
    “Rotation”,
    “SharePoint”,
    “.Net”,
    “C#”,
    “Transform”,
    “Blog”,
    “TagCloud”,
    “Tam Tam”,
    “Axelerate3D”,
    “MOSS”,
    “Math”};
    double radius = RootCanvas.Width / 3;
    int max = tags.Length;
    double phi = 0;
    double theta = 0;
    for (int i = 1; i &amp;lt; max + 1; i++)
    {
        phi = Math.Acos(-1.0 + (2.0 * i – 1.0) / max);
        theta = Math.Sqrt(max * Math.PI) * phi;
        double x = radius * Math.Cos(theta) * Math.Sin(phi);
        double y = radius * Math.Sin(theta) * Math.Sin(phi);
        double z = radius * Math.Cos(phi);
        Tag3D tag = new Tag3D(x, y, z, tags[i -1]);
        tag.Redraw(RootCanvas.Width / 2, RootCanvas.Height / 2);
        RootCanvas.Children.Add(tag.btnLink);
        tagBlocks.Add(tag);
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At the moment the tags to render are hard-coded but we’ll sort that out in part 2.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rotating the tags&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To rotate the tags we will use the position of the mouse as a starting point. When the mousepointer is in the center the tagcloud will remain in the current position. Once the mouse is further away from the centerpoint we’ll increase the rotationspeed. The location of the mousepointer compared to the centerpoint will set the angle of the rotation.&lt;/p&gt;

&lt;p&gt;First we will set the rotation when the tagcloud loads:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
void TagCloud_Loaded(object sender, RoutedEventArgs e)
{
    FillTags();
    rotateTransform = new RotateTransform3D();
    rotateTransform.Rotation = new AxisAngleRotation3D(new Vector3D(1.0, 0.0, 0.0), 0);
    CompositionTarget.Rendering += new EventHandler(CompositionTarget_Rendering);
    LayoutRoot.MouseEnter += new MouseEventHandler(LayoutRoot_MouseEnter);
    LayoutRoot.MouseLeave += new MouseEventHandler(LayoutRoot_MouseLeave);
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here we set the rotation angle to 0 and the rotationaxis to the x-axis. When the mouse moves, we’ll change those parameters, so the rotation will have an effect:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
void LayoutRoot_MouseMove(object sender, MouseEventArgs e)
{
    Point mouseLocation = e.GetPosition(RootCanvas);
    double relativeX = mouseLocation.X – (RootCanvas.ActualWidth / 2);
    double relativeY = mouseLocation.Y – (RootCanvas.ActualHeight / 2);
    MouseX.Text = relativeX.ToString();
    MouseY.Text = relativeY.ToString();
    double speed = Math.Sqrt(Math.Pow(relativeX, 2) + Math.Pow(relativeY, 2)) / 170;
    RotationSpeed.Text = speed.ToString();
    rotateTransform.Rotation = new AxisAngleRotation3D(new Vector3D(relativeY, relativeX, 0), speed);
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To trigger the movement, we have to capture the MouseEnter and MouseLeave events:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
void LayoutRoot_MouseLeave(object sender, MouseEventArgs e) {
     LayoutRoot.MouseMove -= LayoutRoot_MouseMove;
     runRotation = false;
}
void LayoutRoot_MouseEnter(object sender, MouseEventArgs e) {
     LayoutRoot.MouseMove += new MouseEventHandler(LayoutRoot_MouseMove);
     runRotation = true;
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that the rotationparameters are set we need to rotate the tags, or more precisely the centerpoint of the tag. To accomplish this we’ll make use of the Rendering event of the CompositionTarget object. This is called everytime the Silverlight plugin wants to render a new frame.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
void CompositionTarget_Rendering(object sender, EventArgs e)
{
    if (runRotation)
    {
        if (((AxisAngleRotation3D)rotateTransform.Rotation).Angle &amp;gt; 0.05)
        RotateBlocks();
    }
}
private void RotateBlocks()
{
  foreach (Tag3D textBlock in tagBlocks)
  {
    Point3D newPoint;
    if (rotateTransform.TryTransform(textBlock.centerPoint, out newPoint))
    {
      textBlock.centerPoint = newPoint;
      textBlock.Redraw(RootCanvas.ActualWidth / 2, RootCanvas.ActualHeight / 2);
    }
  }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To relieve the CPU a bit, we’ll only rotate the tags if the rotation angle is higher than a threshold value. The actual transformation is accomplished by invoking the TryTransform method and passing it the current centerpoint of each tag.&lt;/p&gt;

&lt;p&gt;At the moment the Silverlight control looks like this:&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&#39;http://blog.petergerritsen.nl/2009/02/19/creating-a-3d-tagcloud-in-silverlight-part-2/&#39;&gt;next part&lt;/a&gt; I’ll show you a way to dynamically set the tags, base their fontsize on the actual weight of the tag and actually use the hyperlink button.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/02/13/creating-a-3d-tagcloud-in-silverlight-part-1</link>
                <guid>http://username.github.io/2009/02/13/creating-a-3d-tagcloud-in-silverlight-part-1</guid>
                <pubDate>2009-02-13T23:02:38Z</pubDate>
        </item>

        <item>
                <title>Fix ASP.Net form submit behavior with jQuery</title>
                <description>&lt;p&gt;In standard ASP.Net web form pages there&amp;#8217;s only one form tag for the entire page. This unfortunately has some side effects on form submit behavior.&lt;/p&gt;

&lt;p&gt;In a standard HTML all forms are contained in their own form tag. When the browser receives a enter key press for the form the form is submitted. Because of the single form in a ASP.Net web form this behavior will be broken and the first submit button on the page will always be triggered by the browser when pressing enter.&lt;/p&gt;

&lt;p&gt;Microsoft has included a feature in ASP.Net 2.0 to overcome this problem. In short you add an attribute &lt;em&gt;DefaultButton&lt;/em&gt;, with the ID of the button to trigger, to an ASP Panel control that wraps the form. Unfortunately this solution doesn&amp;#8217;t work in Firefox.&lt;/p&gt;

&lt;p&gt;To fix this, I decided to use jQuery. What we need to have is a way to identify the different forms on a page and connect them with the right submit button. So I added a fieldset tag around the single form:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;csharp
writer.WriteLine(&amp;quot;&amp;lt;div class=\&amp;quot;regular_forms\&amp;quot;&amp;gt;&amp;quot;);
writer.WriteLine(&amp;quot;&amp;quot;, btnSearch.ClientID);
// form contents go here
writer.WriteLine(&amp;quot;&amp;lt;/fieldset&amp;gt;&amp;lt;/div&amp;gt;&amp;quot;);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The control &lt;em&gt;btnSearch&lt;/em&gt; is the one we want to trigger when a user presses the enter button.&lt;/p&gt;

&lt;p&gt;To hook up the button to the form we use the following JavaScript/jQuery:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javascript
$(document).ready(function() {
    $(&amp;quot;fieldset[defaultsubmitbutton]&amp;quot;).each(function() {
        var submitbuttonid = $(this).attr(&amp;quot;defaultsubmitbutton&amp;quot;);
        $(&amp;quot;input[type=&amp;#39;text&amp;#39;], input[type=&amp;#39;password&amp;#39;]&amp;quot;, this).keydown(function(e) {
            var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
            if (key == 13) {
                e.preventDefault();
                var button = $(&amp;quot;#&amp;quot; + submitbuttonid).eq(0);
                if (button.length &amp;gt; 0) {
                    if (typeof (button.get(0).onclick) == &amp;#39;function&amp;#39;) {
                        button.trigger(&amp;#39;click&amp;#39;);
                    }
                    else if (button.attr(&amp;#39;href&amp;#39;)) {
                        window.location = button.attr(&amp;#39;href&amp;#39;); } else {
                        button.trigger(&amp;#39;click&amp;#39;);
                    }
                }
            }
        });
    });
});
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This script finds all fieldset elements containing the &lt;em&gt;defaultsubmitbutton&lt;/em&gt; attribute, locates all textboxes and password fields within that fieldset and hooks up the keydown event. When the enter key is pressed (keycode 13) the default event is canceled and depending on the type of button the right postback method is triggered.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/02/06/fix-asp-net-form-submit-behavior-with-jquery</link>
                <guid>http://username.github.io/2009/02/06/fix-asp-net-form-submit-behavior-with-jquery</guid>
                <pubDate>2009-02-06T14:26:49Z</pubDate>
        </item>

        <item>
                <title>Retrieving Tasks assigned to users or one of their groups</title>
                <description>&lt;p&gt;Sometimes you want to retrieve all tasks that are assigned to a user or to one of the SharePoint groups the user is a member of. This quite easy to accomplish through generation of a CAML query.&lt;/p&gt;

&lt;p&gt;Just create an Or statement for tasks assigned to the user and loop through all of the groups in the SPUser object to add those to the query.&lt;/p&gt;

&lt;p&gt;The resulting query will look like this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xml
Piet van Tul
Region Controllers
Accounting department
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;By using this query in the QueryOverride of a Content Query Web Part you have all the power of a Content Query combined with the power of query generation.&lt;/p&gt;

&lt;p&gt;EDIT: My collegue Wouter Lemaire pointed out that you can only specify 2 terms per Or or And element. So the above CAML could give some unexpected results.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/02/03/retrieving-tasks-assigned-to-users-or-one-of-their-groups</link>
                <guid>http://username.github.io/2009/02/03/retrieving-tasks-assigned-to-users-or-one-of-their-groups</guid>
                <pubDate>2009-02-03T16:55:08Z</pubDate>
        </item>

        <item>
                <title>JavaScript errors after implementing a custom site design</title>
                <description>&lt;p&gt;Most of the times we create and develop a custom design for the portals and websites we build.&lt;/p&gt;

&lt;p&gt;This can actually lead to some rather odd JavaScript error messages saying some object is undefined when dragging and dropping web parts or using the list item edit menu.&lt;/p&gt;

&lt;p&gt;Believe it or not, this is most of the times due to the custom style sheet and not to any custom JavaScript.&lt;/p&gt;

&lt;p&gt;The reason for this is that the build in JavaScript of MOSS use a property offsetParent of a DOM-element to perform some &amp;#8220;magic&amp;#8221;. &lt;strong&gt;offsetParent&lt;/strong&gt; returns a reference to the object which is the closest (nearest in the containment hierarchy) positioned containing element. In some of our custom designs this sometimes returns null and the script throws the &amp;#8220;object undefined&amp;#8221; error.&lt;/p&gt;

&lt;p&gt;The easiest solution to prevent this, is to absolute-position the body by include the following statement in your css:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;css
body { position: absolute !important; } 
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This can off course lead to some css issues, so positioning a wrapper is also an option.&lt;/p&gt;</description>
                <link>http://username.github.io/2009/01/31/javascript-errors-after-implementing-a-custom-site-design</link>
                <guid>http://username.github.io/2009/01/31/javascript-errors-after-implementing-a-custom-site-design</guid>
                <pubDate>2009-01-31T11:44:11Z</pubDate>
        </item>


</channel>
</rss>
